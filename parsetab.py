
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaADD CLOSE_PAR COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT ID IF INT LEFT_CURLY LESS_THAN L_BRACKET MAIN MORE_THAN MULTIPLY NOT_EQUAL OPEN_PAR PRINT PROGRAM RIGHT_CURLY R_BRACKET SEMI_COLON SUBTRACT VAR VOID WHILEprograma : PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END\n    vars : VAR variables COLON type SEMI_COLON mas_var\n            | emptyvariables : list_ids\n    mas_var : vars\n       | emptylist_ids : ID mas_idsmas_ids : COMMA list_ids\n       | emptytype : INT\n       | FLOAT\n    dec_v : vars\n    dec_f : funcs mas_f\n       | empty\n    mas_f : funcs mas_f\n       | empty\n    \n    body : LEFT_CURLY mas_statement RIGHT_CURLY\n    \n    mas_statement : statement mas_statement\n    | empty\n    \n    statement : assign\n    | condition\n    | cycle\n    | f_call\n    | print\n    \n    assign : ID EQUAL expresion SEMI_COLON\n    \n    expresion : exp mas_expresion\n    \n    mas_expresion : MORE_THAN exp\n    | LESS_THAN exp\n    | NOT_EQUAL exp\n    | empty\n    \n    exp : termino mas_exp\n    \n    mas_exp : ADD termino\n    | SUBTRACT termino\n    | empty\n    \n    termino : factor mas_termino\n    \n    mas_termino : MULTIPLY factor\n    | DIVIDE factor\n    | empty\n    \n    factor : mas_factor\n    \n    mas_factor : OPEN_PAR expresion CLOSE_PAR\n    | signo ID\n    | signo cte\n    | ADD cte\n    | SUBTRACT cte\n    \n    signo : ADD\n    | SUBTRACT\n    | empty\n    \n    cte : CTE_STRING\n    | CTE_FLOAT\n    | CTE_INT\n    \n    print : PRINT expresion mas_print SEMI_COLON\n    | PRINT CTE_STRING mas_print\n    \n    mas_print : COMMA expresion mas_print\n    | CTE_STRING mas_print\n    | empty\n    \n    cycle : DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON\n    \n    condition : IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON\n    \n    mas_condition : ELSE body\n    | empty\n    \n    f_call : ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON\n    \n    mas_f_call : COMMA expresion\n    | empty\n    \n    funcs : VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON\n    \n    params : ID COLON type\n    params : ID COLON type mas_params\n    | empty\n    \n    mas_params : COMMA params\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ID':([2,7,12,23,26,28,35,37,38,39,40,41,45,52,53,54,57,58,59,60,61,62,63,64,65,66,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,104,106,109,110,111,112,113,114,115,116,117,118,119,120,122,128,131,137,139,],[3,15,20,15,42,46,42,-20,-21,-22,-23,-24,-68,-68,-68,-68,-68,-68,-68,-68,-39,-68,95,-45,-46,-47,-68,-68,-55,-52,-26,-68,-68,-68,-30,-31,-68,-68,-34,-35,-68,-68,-38,-41,-42,-48,-49,-50,-43,-44,-25,-68,-68,-51,-68,-54,-27,-28,-29,-32,-33,-36,-37,-40,46,-53,-60,-57,-56,]),'SEMI_COLON':([3,29,30,31,50,56,58,59,60,61,72,76,78,79,81,85,86,89,90,93,95,96,97,98,99,100,101,111,112,113,114,115,116,117,118,119,120,124,126,128,132,134,135,136,138,],[4,49,-10,-11,-17,-68,-68,-68,-68,-39,104,110,-68,-55,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-68,-54,-27,-28,-29,-32,-33,-36,-37,-40,131,-68,-53,137,-59,139,140,-58,]),'VAR':([4,49,103,],[7,7,7,]),'VOID':([4,5,6,8,10,17,49,69,70,71,140,],[-68,12,-12,-3,12,12,-68,-2,-5,-3,-63,]),'MAIN':([4,5,6,8,9,10,11,17,18,19,27,49,69,70,71,140,],[-68,-68,-12,-3,16,-68,-14,-68,-13,-16,-15,-68,-2,-5,-3,-63,]),'LEFT_CURLY':([8,16,44,49,69,70,71,103,108,123,133,],[-3,26,26,-68,-2,-5,-3,-68,26,26,26,]),'COLON':([13,14,15,22,24,32,46,],[21,-4,-68,-7,-9,-8,67,]),'COMMA':([15,30,31,56,57,58,59,60,61,73,78,81,85,86,89,90,93,95,96,97,98,99,100,101,102,111,113,114,115,116,117,118,119,120,],[23,-10,-11,77,77,-68,-68,-68,-39,106,77,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,122,77,-27,-28,-29,-32,-33,-36,-37,-40,]),'OPEN_PAR':([20,42,43,45,52,53,54,62,75,77,82,83,84,87,88,91,92,106,109,],[28,53,54,62,62,62,62,62,109,62,62,62,62,62,62,62,62,62,62,]),'INT':([21,67,],[30,30,]),'FLOAT':([21,67,],[31,31,]),'END':([25,50,],[33,-17,]),'RIGHT_CURLY':([26,34,35,36,37,38,39,40,41,51,57,58,59,60,61,78,79,80,81,85,86,89,90,93,95,96,97,98,99,100,101,104,110,111,112,113,114,115,116,117,118,119,120,128,131,137,139,],[-68,50,-68,-19,-20,-21,-22,-23,-24,-18,-68,-68,-68,-68,-39,-68,-55,-52,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-25,-51,-68,-54,-27,-28,-29,-32,-33,-36,-37,-40,-53,-60,-57,-56,]),'IF':([26,35,37,38,39,40,41,57,58,59,60,61,78,79,80,81,85,86,89,90,93,95,96,97,98,99,100,101,104,110,111,112,113,114,115,116,117,118,119,120,128,131,137,139,],[43,43,-20,-21,-22,-23,-24,-68,-68,-68,-68,-39,-68,-55,-52,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-25,-51,-68,-54,-27,-28,-29,-32,-33,-36,-37,-40,-53,-60,-57,-56,]),'DO':([26,35,37,38,39,40,41,57,58,59,60,61,78,79,80,81,85,86,89,90,93,95,96,97,98,99,100,101,104,110,111,112,113,114,115,116,117,118,119,120,128,131,137,139,],[44,44,-20,-21,-22,-23,-24,-68,-68,-68,-68,-39,-68,-55,-52,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-25,-51,-68,-54,-27,-28,-29,-32,-33,-36,-37,-40,-53,-60,-57,-56,]),'PRINT':([26,35,37,38,39,40,41,57,58,59,60,61,78,79,80,81,85,86,89,90,93,95,96,97,98,99,100,101,104,110,111,112,113,114,115,116,117,118,119,120,128,131,137,139,],[45,45,-20,-21,-22,-23,-24,-68,-68,-68,-68,-39,-68,-55,-52,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-25,-51,-68,-54,-27,-28,-29,-32,-33,-36,-37,-40,-53,-60,-57,-56,]),'CLOSE_PAR':([28,30,31,47,48,58,59,60,61,73,74,81,85,86,89,90,93,94,95,96,97,98,99,100,101,102,105,107,113,114,115,116,117,118,119,120,121,122,125,127,129,],[-68,-10,-11,68,-66,-68,-68,-68,-39,-68,108,-26,-30,-31,-34,-35,-38,120,-41,-42,-48,-49,-50,-43,-44,-64,124,-62,-27,-28,-29,-32,-33,-36,-37,-40,-65,-68,-61,135,-67,]),'EQUAL':([42,],[52,]),'CTE_STRING':([45,52,53,54,56,57,58,59,60,61,62,63,64,65,66,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,106,109,111,113,114,115,116,117,118,119,120,],[57,-68,-68,-68,78,78,-68,-68,-68,-39,-68,97,97,97,-47,-68,78,-26,-68,-68,-68,-30,-31,-68,-68,-34,-35,-68,-68,-38,-41,-42,-48,-49,-50,-43,-44,-68,-68,78,-27,-28,-29,-32,-33,-36,-37,-40,]),'ADD':([45,52,53,54,59,60,61,62,77,82,83,84,87,88,90,91,92,93,95,96,97,98,99,100,101,106,109,118,119,120,],[64,64,64,64,87,-68,-39,64,64,64,64,64,64,64,-35,64,64,-38,-41,-42,-48,-49,-50,-43,-44,64,64,-36,-37,-40,]),'SUBTRACT':([45,52,53,54,59,60,61,62,77,82,83,84,87,88,90,91,92,93,95,96,97,98,99,100,101,106,109,118,119,120,],[65,65,65,65,88,-68,-39,65,65,65,65,65,65,65,-35,65,65,-38,-41,-42,-48,-49,-50,-43,-44,65,65,-36,-37,-40,]),'CTE_FLOAT':([45,52,53,54,62,63,64,65,66,77,82,83,84,87,88,91,92,106,109,],[-68,-68,-68,-68,-68,98,98,98,-47,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,]),'CTE_INT':([45,52,53,54,62,63,64,65,66,77,82,83,84,87,88,91,92,106,109,],[-68,-68,-68,-68,-68,99,99,99,-47,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,]),'WHILE':([50,55,],[-17,75,]),'ELSE':([50,126,],[-17,133,]),'R_BRACKET':([50,130,],[-17,136,]),'MORE_THAN':([58,59,60,61,86,89,90,93,95,96,97,98,99,100,101,116,117,118,119,120,],[82,-68,-68,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'LESS_THAN':([58,59,60,61,86,89,90,93,95,96,97,98,99,100,101,116,117,118,119,120,],[83,-68,-68,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'NOT_EQUAL':([58,59,60,61,86,89,90,93,95,96,97,98,99,100,101,116,117,118,119,120,],[84,-68,-68,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'MULTIPLY':([60,61,95,96,97,98,99,100,101,120,],[91,-39,-41,-42,-48,-49,-50,-43,-44,-40,]),'DIVIDE':([60,61,95,96,97,98,99,100,101,120,],[92,-39,-41,-42,-48,-49,-50,-43,-44,-40,]),'L_BRACKET':([68,],[103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_v':([4,],[5,]),'vars':([4,49,103,],[6,70,123,]),'empty':([4,5,10,15,17,26,28,35,45,49,52,53,54,56,57,58,59,60,62,73,77,78,82,83,84,87,88,91,92,103,106,109,111,122,126,],[8,11,19,24,19,36,48,36,66,71,66,66,66,79,79,85,89,93,66,107,66,79,66,66,66,66,66,66,66,8,66,66,79,48,134,]),'dec_f':([5,],[9,]),'funcs':([5,10,17,],[10,17,17,]),'variables':([7,],[13,]),'list_ids':([7,23,],[14,32,]),'mas_f':([10,17,],[18,27,]),'mas_ids':([15,],[22,]),'body':([16,44,108,123,133,],[25,55,126,130,138,]),'type':([21,67,],[29,102,]),'mas_statement':([26,35,],[34,51,]),'statement':([26,35,],[35,35,]),'assign':([26,35,],[37,37,]),'condition':([26,35,],[38,38,]),'cycle':([26,35,],[39,39,]),'f_call':([26,35,],[40,40,]),'print':([26,35,],[41,41,]),'params':([28,122,],[47,129,]),'expresion':([45,52,53,54,62,77,106,109,],[56,72,73,74,94,111,125,127,]),'exp':([45,52,53,54,62,77,82,83,84,106,109,],[58,58,58,58,58,58,113,114,115,58,58,]),'termino':([45,52,53,54,62,77,82,83,84,87,88,106,109,],[59,59,59,59,59,59,59,59,59,116,117,59,59,]),'factor':([45,52,53,54,62,77,82,83,84,87,88,91,92,106,109,],[60,60,60,60,60,60,60,60,60,60,60,118,119,60,60,]),'mas_factor':([45,52,53,54,62,77,82,83,84,87,88,91,92,106,109,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'signo':([45,52,53,54,62,77,82,83,84,87,88,91,92,106,109,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'mas_var':([49,],[69,]),'mas_print':([56,57,78,111,],[76,80,112,128,]),'mas_expresion':([58,],[81,]),'mas_exp':([59,],[86,]),'mas_termino':([60,],[90,]),'cte':([63,64,65,],[96,100,101,]),'mas_f_call':([73,],[105,]),'mas_params':([102,],[121,]),'mas_condition':([126,],[132,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END','programa',8,'p_programa','lex.py',102),
  ('vars -> VAR variables COLON type SEMI_COLON mas_var','vars',6,'p_vars','lex.py',106),
  ('vars -> empty','vars',1,'p_vars','lex.py',107),
  ('variables -> list_ids','variables',1,'p_variables','lex.py',112),
  ('mas_var -> vars','mas_var',1,'p_mas_var','lex.py',116),
  ('mas_var -> empty','mas_var',1,'p_mas_var','lex.py',117),
  ('list_ids -> ID mas_ids','list_ids',2,'p_list_ids','lex.py',120),
  ('mas_ids -> COMMA list_ids','mas_ids',2,'p_mas_ids','lex.py',126),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','lex.py',127),
  ('type -> INT','type',1,'p_type','lex.py',130),
  ('type -> FLOAT','type',1,'p_type','lex.py',131),
  ('dec_v -> vars','dec_v',1,'p_dec_v','lex.py',135),
  ('dec_f -> funcs mas_f','dec_f',2,'p_dec_f','lex.py',139),
  ('dec_f -> empty','dec_f',1,'p_dec_f','lex.py',140),
  ('mas_f -> funcs mas_f','mas_f',2,'p_mas_f','lex.py',144),
  ('mas_f -> empty','mas_f',1,'p_mas_f','lex.py',145),
  ('body -> LEFT_CURLY mas_statement RIGHT_CURLY','body',3,'p_body','lex.py',150),
  ('mas_statement -> statement mas_statement','mas_statement',2,'p_mas_statement','lex.py',155),
  ('mas_statement -> empty','mas_statement',1,'p_mas_statement','lex.py',156),
  ('statement -> assign','statement',1,'p_statement','lex.py',161),
  ('statement -> condition','statement',1,'p_statement','lex.py',162),
  ('statement -> cycle','statement',1,'p_statement','lex.py',163),
  ('statement -> f_call','statement',1,'p_statement','lex.py',164),
  ('statement -> print','statement',1,'p_statement','lex.py',165),
  ('assign -> ID EQUAL expresion SEMI_COLON','assign',4,'p_assign','lex.py',170),
  ('expresion -> exp mas_expresion','expresion',2,'p_expresion','lex.py',175),
  ('mas_expresion -> MORE_THAN exp','mas_expresion',2,'p_mas_expresion','lex.py',180),
  ('mas_expresion -> LESS_THAN exp','mas_expresion',2,'p_mas_expresion','lex.py',181),
  ('mas_expresion -> NOT_EQUAL exp','mas_expresion',2,'p_mas_expresion','lex.py',182),
  ('mas_expresion -> empty','mas_expresion',1,'p_mas_expresion','lex.py',183),
  ('exp -> termino mas_exp','exp',2,'p_exp','lex.py',188),
  ('mas_exp -> ADD termino','mas_exp',2,'p_mas_exp','lex.py',193),
  ('mas_exp -> SUBTRACT termino','mas_exp',2,'p_mas_exp','lex.py',194),
  ('mas_exp -> empty','mas_exp',1,'p_mas_exp','lex.py',195),
  ('termino -> factor mas_termino','termino',2,'p_termino','lex.py',200),
  ('mas_termino -> MULTIPLY factor','mas_termino',2,'p_mas_termino','lex.py',205),
  ('mas_termino -> DIVIDE factor','mas_termino',2,'p_mas_termino','lex.py',206),
  ('mas_termino -> empty','mas_termino',1,'p_mas_termino','lex.py',207),
  ('factor -> mas_factor','factor',1,'p_factor','lex.py',212),
  ('mas_factor -> OPEN_PAR expresion CLOSE_PAR','mas_factor',3,'p_mas_factor','lex.py',217),
  ('mas_factor -> signo ID','mas_factor',2,'p_mas_factor','lex.py',218),
  ('mas_factor -> signo cte','mas_factor',2,'p_mas_factor','lex.py',219),
  ('mas_factor -> ADD cte','mas_factor',2,'p_mas_factor','lex.py',220),
  ('mas_factor -> SUBTRACT cte','mas_factor',2,'p_mas_factor','lex.py',221),
  ('signo -> ADD','signo',1,'p_signo','lex.py',226),
  ('signo -> SUBTRACT','signo',1,'p_signo','lex.py',227),
  ('signo -> empty','signo',1,'p_signo','lex.py',228),
  ('cte -> CTE_STRING','cte',1,'p_cte','lex.py',233),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','lex.py',234),
  ('cte -> CTE_INT','cte',1,'p_cte','lex.py',235),
  ('print -> PRINT expresion mas_print SEMI_COLON','print',4,'p_print','lex.py',240),
  ('print -> PRINT CTE_STRING mas_print','print',3,'p_print','lex.py',241),
  ('mas_print -> COMMA expresion mas_print','mas_print',3,'p_mas_print','lex.py',246),
  ('mas_print -> CTE_STRING mas_print','mas_print',2,'p_mas_print','lex.py',247),
  ('mas_print -> empty','mas_print',1,'p_mas_print','lex.py',248),
  ('cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON','cycle',7,'p_cycle','lex.py',253),
  ('condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON','condition',7,'p_condition','lex.py',258),
  ('mas_condition -> ELSE body','mas_condition',2,'p_mas_condition','lex.py',263),
  ('mas_condition -> empty','mas_condition',1,'p_mas_condition','lex.py',264),
  ('f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON','f_call',6,'p_f_call','lex.py',269),
  ('mas_f_call -> COMMA expresion','mas_f_call',2,'p_mas_f_call','lex.py',274),
  ('mas_f_call -> empty','mas_f_call',1,'p_mas_f_call','lex.py',275),
  ('funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON','funcs',10,'p_funcs','lex.py',280),
  ('params -> ID COLON type','params',3,'p_params','lex.py',285),
  ('params -> ID COLON type mas_params','params',4,'p_params','lex.py',286),
  ('params -> empty','params',1,'p_params','lex.py',287),
  ('mas_params -> COMMA params','mas_params',2,'p_mas_params','lex.py',292),
  ('empty -> <empty>','empty',0,'p_empty','lex.py',296),
]
