
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaADD CLOSE_PAR COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT ID IF INT LEFT_CURLY LESS_THAN L_BRACKET MAIN MORE_THAN MULTIPLY NOT_EQUAL OPEN_PAR PRINT PROGRAM RIGHT_CURLY R_BRACKET SEMI_COLON SUBTRACT VAR VOID WHILEprograma : PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END\n    vars : VAR variables COLON type SEMI_COLON mas_var\n            | emptyvariables : list_ids\n    mas_var : variables COLON type SEMI_COLON mas_var\n       | emptylist_ids : ID mas_idsmas_ids : COMMA list_ids\n       | emptytype : INT\n       | FLOAT\n    dec_v : vars\n    dec_f : funcs mas_f\n       | empty\n    mas_f : funcs mas_f\n       | empty\n    \n    body : LEFT_CURLY mas_statement RIGHT_CURLY\n    \n    mas_statement : statement mas_statement\n    | empty\n    \n    statement : assign\n    | condition\n    | cycle\n    | f_call\n    | print\n    \n    assign : ID EQUAL expresion SEMI_COLON\n    \n    expresion : exp mas_expresion\n    \n    mas_expresion : MORE_THAN exp\n    | LESS_THAN exp\n    | NOT_EQUAL exp\n    | empty\n    \n    exp : termino mas_exp\n    \n    mas_exp : ADD termino\n    | SUBTRACT termino\n    | empty\n    \n    termino : factor mas_termino\n    \n    mas_termino : MULTIPLY factor\n    | DIVIDE factor\n    | empty\n    \n    factor : mas_factor\n    \n    mas_factor : OPEN_PAR expresion CLOSE_PAR\n    | signo ID\n    | signo cte\n    | ADD cte\n    | SUBTRACT cte\n    \n    signo : ADD\n    | SUBTRACT\n    | empty\n    \n    cte : CTE_STRING\n    | CTE_FLOAT\n    | CTE_INT\n    \n    print : PRINT OPEN_PAR expresion mas_print CLOSE_PAR SEMI_COLON\n    | PRINT OPEN_PAR CTE_STRING mas_print CLOSE_PAR SEMI_COLON\n    \n    mas_print : COMMA expresion mas_print\n    | CTE_STRING mas_print\n    | empty\n    \n    cycle : DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON\n    \n    condition : IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON\n    \n    mas_condition : ELSE body\n    | empty\n    \n    f_call : ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON\n    \n    mas_f_call : COMMA expresion\n    | empty\n    \n    funcs : VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON\n    \n    params : ID COLON type\n    params : ID COLON type mas_params\n    | empty\n    \n    mas_params : COMMA params\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ID':([2,7,12,23,26,28,35,37,38,39,40,41,49,52,53,54,56,67,68,69,70,71,80,82,83,84,87,88,91,92,103,106,108,113,134,135,140,142,145,147,],[3,15,20,15,42,46,42,-20,-21,-22,-23,-24,15,-68,-68,-68,-68,-68,95,-45,-46,-47,-25,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,46,15,-60,-51,-52,-57,-56,]),'SEMI_COLON':([3,29,30,31,50,62,63,64,65,66,81,85,86,89,90,93,95,96,97,98,99,100,101,115,116,117,118,119,120,121,122,123,124,126,128,131,136,138,139,143,146,],[4,49,-10,-11,-17,80,-68,-68,-68,-39,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,134,-27,-28,-29,-32,-33,-36,-37,-40,135,-68,140,142,145,-59,147,148,-58,]),'VAR':([4,78,],[7,7,]),'VOID':([4,5,6,8,10,17,49,60,61,134,144,148,],[-68,12,-12,-3,12,12,-68,-2,-6,-68,-5,-63,]),'MAIN':([4,5,6,8,9,10,11,17,18,19,27,49,60,61,134,144,148,],[-68,-68,-12,-3,16,-68,-14,-68,-13,-16,-15,-68,-2,-6,-68,-5,-63,]),'LEFT_CURLY':([8,16,44,49,60,61,78,105,114,134,137,144,],[-3,26,26,-68,-2,-6,-68,26,26,-68,26,-5,]),'COLON':([13,14,15,22,24,32,46,59,],[21,-4,-68,-7,-9,-8,57,79,]),'COMMA':([15,30,31,63,64,65,66,72,75,76,77,81,85,86,89,90,93,95,96,97,98,99,100,101,109,116,117,118,119,120,121,122,123,129,],[23,-10,-11,-68,-68,-68,-39,103,108,108,113,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,108,-27,-28,-29,-32,-33,-36,-37,-40,108,]),'OPEN_PAR':([20,42,43,45,52,53,54,56,67,74,82,83,84,87,88,91,92,103,106,108,],[28,53,54,56,67,67,67,67,67,106,67,67,67,67,67,67,67,67,67,67,]),'INT':([21,57,79,],[30,30,30,]),'FLOAT':([21,57,79,],[31,31,31,]),'END':([25,50,],[33,-17,]),'RIGHT_CURLY':([26,34,35,36,37,38,39,40,41,51,80,135,140,142,145,147,],[-68,50,-68,-19,-20,-21,-22,-23,-24,-18,-25,-60,-51,-52,-57,-56,]),'IF':([26,35,37,38,39,40,41,80,135,140,142,145,147,],[43,43,-20,-21,-22,-23,-24,-25,-60,-51,-52,-57,-56,]),'DO':([26,35,37,38,39,40,41,80,135,140,142,145,147,],[44,44,-20,-21,-22,-23,-24,-25,-60,-51,-52,-57,-56,]),'PRINT':([26,35,37,38,39,40,41,80,135,140,142,145,147,],[45,45,-20,-21,-22,-23,-24,-25,-60,-51,-52,-57,-56,]),'CLOSE_PAR':([28,30,31,47,48,63,64,65,66,72,73,75,76,77,81,85,86,89,90,93,94,95,96,97,98,99,100,101,102,104,107,109,110,111,112,113,116,117,118,119,120,121,122,123,125,127,129,130,132,141,],[-68,-10,-11,58,-66,-68,-68,-68,-39,-68,105,-68,-68,-64,-26,-30,-31,-34,-35,-38,123,-41,-42,-48,-49,-50,-43,-44,124,-62,128,-68,-55,131,-65,-68,-27,-28,-29,-32,-33,-36,-37,-40,-61,139,-68,-54,-67,-53,]),'EQUAL':([42,],[52,]),'WHILE':([50,55,],[-17,74,]),'ELSE':([50,126,],[-17,137,]),'R_BRACKET':([50,133,],[-17,143,]),'ADD':([52,53,54,56,64,65,66,67,82,83,84,87,88,90,91,92,93,95,96,97,98,99,100,101,103,106,108,121,122,123,],[69,69,69,69,87,-68,-39,69,69,69,69,69,69,-35,69,69,-38,-41,-42,-48,-49,-50,-43,-44,69,69,69,-36,-37,-40,]),'SUBTRACT':([52,53,54,56,64,65,66,67,82,83,84,87,88,90,91,92,93,95,96,97,98,99,100,101,103,106,108,121,122,123,],[70,70,70,70,88,-68,-39,70,70,70,70,70,70,-35,70,70,-38,-41,-42,-48,-49,-50,-43,-44,70,70,70,-36,-37,-40,]),'CTE_STRING':([52,53,54,56,63,64,65,66,67,68,69,70,71,75,76,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,103,106,108,109,116,117,118,119,120,121,122,123,129,],[-68,-68,-68,76,-68,-68,-68,-39,-68,97,97,97,-47,109,109,-26,-68,-68,-68,-30,-31,-68,-68,-34,-35,-68,-68,-38,-41,-42,-48,-49,-50,-43,-44,-68,-68,-68,109,-27,-28,-29,-32,-33,-36,-37,-40,109,]),'CTE_FLOAT':([52,53,54,56,67,68,69,70,71,82,83,84,87,88,91,92,103,106,108,],[-68,-68,-68,-68,-68,98,98,98,-47,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,]),'CTE_INT':([52,53,54,56,67,68,69,70,71,82,83,84,87,88,91,92,103,106,108,],[-68,-68,-68,-68,-68,99,99,99,-47,-68,-68,-68,-68,-68,-68,-68,-68,-68,-68,]),'L_BRACKET':([58,],[78,]),'MORE_THAN':([63,64,65,66,86,89,90,93,95,96,97,98,99,100,101,119,120,121,122,123,],[82,-68,-68,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'LESS_THAN':([63,64,65,66,86,89,90,93,95,96,97,98,99,100,101,119,120,121,122,123,],[83,-68,-68,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'NOT_EQUAL':([63,64,65,66,86,89,90,93,95,96,97,98,99,100,101,119,120,121,122,123,],[84,-68,-68,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'MULTIPLY':([65,66,95,96,97,98,99,100,101,123,],[91,-39,-41,-42,-48,-49,-50,-43,-44,-40,]),'DIVIDE':([65,66,95,96,97,98,99,100,101,123,],[92,-39,-41,-42,-48,-49,-50,-43,-44,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_v':([4,],[5,]),'vars':([4,78,],[6,114,]),'empty':([4,5,10,15,17,26,28,35,49,52,53,54,56,63,64,65,67,72,75,76,78,82,83,84,87,88,91,92,103,106,108,109,113,126,129,134,],[8,11,19,24,19,36,48,36,61,71,71,71,71,85,89,93,71,104,110,110,8,71,71,71,71,71,71,71,71,71,71,110,48,138,110,61,]),'dec_f':([5,],[9,]),'funcs':([5,10,17,],[10,17,17,]),'variables':([7,49,134,],[13,59,59,]),'list_ids':([7,23,49,134,],[14,32,14,14,]),'mas_f':([10,17,],[18,27,]),'mas_ids':([15,],[22,]),'body':([16,44,105,114,137,],[25,55,126,133,146,]),'type':([21,57,79,],[29,77,115,]),'mas_statement':([26,35,],[34,51,]),'statement':([26,35,],[35,35,]),'assign':([26,35,],[37,37,]),'condition':([26,35,],[38,38,]),'cycle':([26,35,],[39,39,]),'f_call':([26,35,],[40,40,]),'print':([26,35,],[41,41,]),'params':([28,113,],[47,132,]),'mas_var':([49,134,],[60,144,]),'expresion':([52,53,54,56,67,103,106,108,],[62,72,73,75,94,125,127,129,]),'exp':([52,53,54,56,67,82,83,84,103,106,108,],[63,63,63,63,63,116,117,118,63,63,63,]),'termino':([52,53,54,56,67,82,83,84,87,88,103,106,108,],[64,64,64,64,64,64,64,64,119,120,64,64,64,]),'factor':([52,53,54,56,67,82,83,84,87,88,91,92,103,106,108,],[65,65,65,65,65,65,65,65,65,65,121,122,65,65,65,]),'mas_factor':([52,53,54,56,67,82,83,84,87,88,91,92,103,106,108,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'signo':([52,53,54,56,67,82,83,84,87,88,91,92,103,106,108,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'mas_expresion':([63,],[81,]),'mas_exp':([64,],[86,]),'mas_termino':([65,],[90,]),'cte':([68,69,70,],[96,100,101,]),'mas_f_call':([72,],[102,]),'mas_print':([75,76,109,129,],[107,111,130,141,]),'mas_params':([77,],[112,]),'mas_condition':([126,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END','programa',8,'p_programa','lex.py',104),
  ('vars -> VAR variables COLON type SEMI_COLON mas_var','vars',6,'p_vars','lex.py',111),
  ('vars -> empty','vars',1,'p_vars','lex.py',112),
  ('variables -> list_ids','variables',1,'p_variables','lex.py',115),
  ('mas_var -> variables COLON type SEMI_COLON mas_var','mas_var',5,'p_mas_var','lex.py',119),
  ('mas_var -> empty','mas_var',1,'p_mas_var','lex.py',120),
  ('list_ids -> ID mas_ids','list_ids',2,'p_list_ids','lex.py',123),
  ('mas_ids -> COMMA list_ids','mas_ids',2,'p_mas_ids','lex.py',127),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','lex.py',128),
  ('type -> INT','type',1,'p_type','lex.py',131),
  ('type -> FLOAT','type',1,'p_type','lex.py',132),
  ('dec_v -> vars','dec_v',1,'p_dec_v','lex.py',142),
  ('dec_f -> funcs mas_f','dec_f',2,'p_dec_f','lex.py',148),
  ('dec_f -> empty','dec_f',1,'p_dec_f','lex.py',149),
  ('mas_f -> funcs mas_f','mas_f',2,'p_mas_f','lex.py',153),
  ('mas_f -> empty','mas_f',1,'p_mas_f','lex.py',154),
  ('body -> LEFT_CURLY mas_statement RIGHT_CURLY','body',3,'p_body','lex.py',159),
  ('mas_statement -> statement mas_statement','mas_statement',2,'p_mas_statement','lex.py',166),
  ('mas_statement -> empty','mas_statement',1,'p_mas_statement','lex.py',167),
  ('statement -> assign','statement',1,'p_statement','lex.py',181),
  ('statement -> condition','statement',1,'p_statement','lex.py',182),
  ('statement -> cycle','statement',1,'p_statement','lex.py',183),
  ('statement -> f_call','statement',1,'p_statement','lex.py',184),
  ('statement -> print','statement',1,'p_statement','lex.py',185),
  ('assign -> ID EQUAL expresion SEMI_COLON','assign',4,'p_assign','lex.py',192),
  ('expresion -> exp mas_expresion','expresion',2,'p_expresion','lex.py',199),
  ('mas_expresion -> MORE_THAN exp','mas_expresion',2,'p_mas_expresion','lex.py',205),
  ('mas_expresion -> LESS_THAN exp','mas_expresion',2,'p_mas_expresion','lex.py',206),
  ('mas_expresion -> NOT_EQUAL exp','mas_expresion',2,'p_mas_expresion','lex.py',207),
  ('mas_expresion -> empty','mas_expresion',1,'p_mas_expresion','lex.py',208),
  ('exp -> termino mas_exp','exp',2,'p_exp','lex.py',214),
  ('mas_exp -> ADD termino','mas_exp',2,'p_mas_exp','lex.py',220),
  ('mas_exp -> SUBTRACT termino','mas_exp',2,'p_mas_exp','lex.py',221),
  ('mas_exp -> empty','mas_exp',1,'p_mas_exp','lex.py',222),
  ('termino -> factor mas_termino','termino',2,'p_termino','lex.py',228),
  ('mas_termino -> MULTIPLY factor','mas_termino',2,'p_mas_termino','lex.py',234),
  ('mas_termino -> DIVIDE factor','mas_termino',2,'p_mas_termino','lex.py',235),
  ('mas_termino -> empty','mas_termino',1,'p_mas_termino','lex.py',236),
  ('factor -> mas_factor','factor',1,'p_factor','lex.py',242),
  ('mas_factor -> OPEN_PAR expresion CLOSE_PAR','mas_factor',3,'p_mas_factor','lex.py',248),
  ('mas_factor -> signo ID','mas_factor',2,'p_mas_factor','lex.py',249),
  ('mas_factor -> signo cte','mas_factor',2,'p_mas_factor','lex.py',250),
  ('mas_factor -> ADD cte','mas_factor',2,'p_mas_factor','lex.py',251),
  ('mas_factor -> SUBTRACT cte','mas_factor',2,'p_mas_factor','lex.py',252),
  ('signo -> ADD','signo',1,'p_signo','lex.py',261),
  ('signo -> SUBTRACT','signo',1,'p_signo','lex.py',262),
  ('signo -> empty','signo',1,'p_signo','lex.py',263),
  ('cte -> CTE_STRING','cte',1,'p_cte','lex.py',269),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','lex.py',270),
  ('cte -> CTE_INT','cte',1,'p_cte','lex.py',271),
  ('print -> PRINT OPEN_PAR expresion mas_print CLOSE_PAR SEMI_COLON','print',6,'p_print','lex.py',277),
  ('print -> PRINT OPEN_PAR CTE_STRING mas_print CLOSE_PAR SEMI_COLON','print',6,'p_print','lex.py',278),
  ('mas_print -> COMMA expresion mas_print','mas_print',3,'p_mas_print','lex.py',285),
  ('mas_print -> CTE_STRING mas_print','mas_print',2,'p_mas_print','lex.py',286),
  ('mas_print -> empty','mas_print',1,'p_mas_print','lex.py',287),
  ('cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON','cycle',7,'p_cycle','lex.py',292),
  ('condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON','condition',7,'p_condition','lex.py',300),
  ('mas_condition -> ELSE body','mas_condition',2,'p_mas_condition','lex.py',309),
  ('mas_condition -> empty','mas_condition',1,'p_mas_condition','lex.py',310),
  ('f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON','f_call',6,'p_f_call','lex.py',317),
  ('mas_f_call -> COMMA expresion','mas_f_call',2,'p_mas_f_call','lex.py',322),
  ('mas_f_call -> empty','mas_f_call',1,'p_mas_f_call','lex.py',323),
  ('funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON','funcs',10,'p_funcs','lex.py',328),
  ('params -> ID COLON type','params',3,'p_params','lex.py',338),
  ('params -> ID COLON type mas_params','params',4,'p_params','lex.py',339),
  ('params -> empty','params',1,'p_params','lex.py',340),
  ('mas_params -> COMMA params','mas_params',2,'p_mas_params','lex.py',345),
  ('empty -> <empty>','empty',0,'p_empty','lex.py',349),
]
