
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaADD CLOSE_PAR COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUAL FLOAT ID IF INT LEFT_CURLY LESS_THAN L_BRACKET MAIN MORE_THAN MULTIPLY NOT_EQUAL OPEN_PAR PRINT PROGRAM RIGHT_CURLY R_BRACKET SEMI_COLON SUBTRACT VAR VOID WHILEprograma : PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END\n    vars : VAR variables COLON type SEMI_COLON mas_var\n            | emptyvariables : list_ids\n    mas_var : variables COLON type SEMI_COLON mas_var\n       | emptylist_ids : ID mas_idsmas_ids : COMMA list_ids\n       | emptytype : INT\n       | FLOAT\n    dec_v : vars\n    dec_f : funcs mas_f\n       | empty\n    mas_f : funcs mas_f\n       | empty\n    \n    body : LEFT_CURLY mas_statement RIGHT_CURLY\n    \n    mas_statement : statement mas_statement\n    | empty\n    \n    statement : assign\n    | condition\n    | cycle\n    | f_call\n    | print\n    \n    assign : ID EQUAL expresion SEMI_COLON\n    \n    expresion : exp mas_expresion\n    \n    mas_expresion : MORE_THAN exp\n    | LESS_THAN exp\n    | NOT_EQUAL exp\n    | empty\n    \n    exp : termino mas_exp\n    \n    mas_exp : ADD termino\n    | SUBTRACT termino\n    | empty\n    \n    termino : factor mas_termino\n    \n    mas_termino : MULTIPLY factor\n    | DIVIDE factor\n    | empty\n    \n    factor : mas_factor\n    \n    mas_factor : OPEN_PAR expresion CLOSE_PAR\n    | signo ID\n    | signo cte\n    | ADD cte\n    | SUBTRACT cte\n    \n    signo : ADD\n    | SUBTRACT\n    | empty\n    \n    cte : CTE_STRING\n    | CTE_FLOAT\n    | CTE_INT\n    \n    print : PRINT OPEN_PAR expresion mas_print CLOSE_PAR SEMI_COLON\n    | PRINT OPEN_PAR CTE_STRING mas_print CLOSE_PAR SEMI_COLON\n    \n    mas_print : COMMA expresion mas_print\n    | CTE_STRING mas_print\n    | empty\n    \n    cycle : DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON\n    | WHILE OPEN_PAR expresion CLOSE_PAR body SEMI_COLON\n    \n    condition : IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON\n    \n    mas_condition : ELSE body\n    | empty\n    \n    f_call : ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON\n    \n    mas_f_call : COMMA expresion\n    | empty\n    \n    funcs : VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON\n    \n    params : ID COLON type\n    params : ID COLON type mas_params\n    | empty\n    \n    mas_params : COMMA params\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'ID':([2,7,12,23,26,28,35,37,38,39,40,41,50,53,54,55,57,58,69,70,71,72,73,83,85,86,87,90,91,94,95,106,109,112,117,139,140,145,146,148,151,153,],[3,15,20,15,42,47,42,-20,-21,-22,-23,-24,15,-69,-69,-69,-69,-69,-69,98,-45,-46,-47,-25,-69,-69,-69,-69,-69,-69,-69,-69,-69,-69,47,15,-61,-57,-51,-52,-58,-56,]),'SEMI_COLON':([3,29,30,31,51,64,65,66,67,68,84,88,89,92,93,96,98,99,100,101,102,103,104,119,120,121,122,123,124,125,126,127,128,130,132,133,136,141,143,144,149,152,],[4,50,-10,-11,-17,83,-69,-69,-69,-39,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,139,-27,-28,-29,-32,-33,-36,-37,-40,140,-69,145,146,148,151,-60,153,154,-59,]),'VAR':([4,81,],[7,7,]),'VOID':([4,5,6,8,10,17,50,62,63,139,150,154,],[-69,12,-12,-3,12,12,-69,-2,-6,-69,-5,-64,]),'MAIN':([4,5,6,8,9,10,11,17,18,19,27,50,62,63,139,150,154,],[-69,-69,-12,-3,16,-69,-14,-69,-13,-16,-15,-69,-2,-6,-69,-5,-64,]),'LEFT_CURLY':([8,16,44,50,62,63,81,108,110,118,139,142,150,],[-3,26,26,-69,-2,-6,-69,26,26,26,-69,26,-5,]),'COLON':([13,14,15,22,24,32,47,61,],[21,-4,-69,-7,-9,-8,59,82,]),'COMMA':([15,30,31,65,66,67,68,74,78,79,80,84,88,89,92,93,96,98,99,100,101,102,103,104,113,120,121,122,123,124,125,126,127,134,],[23,-10,-11,-69,-69,-69,-39,106,112,112,117,-26,-30,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,112,-27,-28,-29,-32,-33,-36,-37,-40,112,]),'OPEN_PAR':([20,42,43,45,46,53,54,55,57,58,69,76,85,86,87,90,91,94,95,106,109,112,],[28,54,55,57,58,69,69,69,69,69,69,109,69,69,69,69,69,69,69,69,69,69,]),'INT':([21,59,82,],[30,30,30,]),'FLOAT':([21,59,82,],[31,31,31,]),'END':([25,51,],[33,-17,]),'RIGHT_CURLY':([26,34,35,36,37,38,39,40,41,52,83,140,145,146,148,151,153,],[-69,51,-69,-19,-20,-21,-22,-23,-24,-18,-25,-61,-57,-51,-52,-58,-56,]),'IF':([26,35,37,38,39,40,41,83,140,145,146,148,151,153,],[43,43,-20,-21,-22,-23,-24,-25,-61,-57,-51,-52,-58,-56,]),'DO':([26,35,37,38,39,40,41,83,140,145,146,148,151,153,],[44,44,-20,-21,-22,-23,-24,-25,-61,-57,-51,-52,-58,-56,]),'WHILE':([26,35,37,38,39,40,41,51,56,83,140,145,146,148,151,153,],[45,45,-20,-21,-22,-23,-24,-17,76,-25,-61,-57,-51,-52,-58,-56,]),'PRINT':([26,35,37,38,39,40,41,83,140,145,146,148,151,153,],[46,46,-20,-21,-22,-23,-24,-25,-61,-57,-51,-52,-58,-56,]),'CLOSE_PAR':([28,30,31,48,49,65,66,67,68,74,75,77,78,79,80,84,88,89,92,93,96,97,98,99,100,101,102,103,104,105,107,111,113,114,115,116,117,120,121,122,123,124,125,126,127,129,131,134,135,137,147,],[-69,-10,-11,60,-67,-69,-69,-69,-39,-69,108,110,-69,-69,-65,-26,-30,-31,-34,-35,-38,127,-41,-42,-48,-49,-50,-43,-44,128,-63,133,-69,-55,136,-66,-69,-27,-28,-29,-32,-33,-36,-37,-40,-62,144,-69,-54,-68,-53,]),'EQUAL':([42,],[53,]),'ELSE':([51,130,],[-17,142,]),'R_BRACKET':([51,138,],[-17,149,]),'ADD':([53,54,55,57,58,66,67,68,69,85,86,87,90,91,93,94,95,96,98,99,100,101,102,103,104,106,109,112,125,126,127,],[71,71,71,71,71,90,-69,-39,71,71,71,71,71,71,-35,71,71,-38,-41,-42,-48,-49,-50,-43,-44,71,71,71,-36,-37,-40,]),'SUBTRACT':([53,54,55,57,58,66,67,68,69,85,86,87,90,91,93,94,95,96,98,99,100,101,102,103,104,106,109,112,125,126,127,],[72,72,72,72,72,91,-69,-39,72,72,72,72,72,72,-35,72,72,-38,-41,-42,-48,-49,-50,-43,-44,72,72,72,-36,-37,-40,]),'CTE_STRING':([53,54,55,57,58,65,66,67,68,69,70,71,72,73,78,79,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,106,109,112,113,120,121,122,123,124,125,126,127,134,],[-69,-69,-69,-69,79,-69,-69,-69,-39,-69,100,100,100,-47,113,113,-26,-69,-69,-69,-30,-31,-69,-69,-34,-35,-69,-69,-38,-41,-42,-48,-49,-50,-43,-44,-69,-69,-69,113,-27,-28,-29,-32,-33,-36,-37,-40,113,]),'CTE_FLOAT':([53,54,55,57,58,69,70,71,72,73,85,86,87,90,91,94,95,106,109,112,],[-69,-69,-69,-69,-69,-69,101,101,101,-47,-69,-69,-69,-69,-69,-69,-69,-69,-69,-69,]),'CTE_INT':([53,54,55,57,58,69,70,71,72,73,85,86,87,90,91,94,95,106,109,112,],[-69,-69,-69,-69,-69,-69,102,102,102,-47,-69,-69,-69,-69,-69,-69,-69,-69,-69,-69,]),'L_BRACKET':([60,],[81,]),'MORE_THAN':([65,66,67,68,89,92,93,96,98,99,100,101,102,103,104,123,124,125,126,127,],[85,-69,-69,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'LESS_THAN':([65,66,67,68,89,92,93,96,98,99,100,101,102,103,104,123,124,125,126,127,],[86,-69,-69,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'NOT_EQUAL':([65,66,67,68,89,92,93,96,98,99,100,101,102,103,104,123,124,125,126,127,],[87,-69,-69,-39,-31,-34,-35,-38,-41,-42,-48,-49,-50,-43,-44,-32,-33,-36,-37,-40,]),'MULTIPLY':([67,68,98,99,100,101,102,103,104,127,],[94,-39,-41,-42,-48,-49,-50,-43,-44,-40,]),'DIVIDE':([67,68,98,99,100,101,102,103,104,127,],[95,-39,-41,-42,-48,-49,-50,-43,-44,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'dec_v':([4,],[5,]),'vars':([4,81,],[6,118,]),'empty':([4,5,10,15,17,26,28,35,50,53,54,55,57,58,65,66,67,69,74,78,79,81,85,86,87,90,91,94,95,106,109,112,113,117,130,134,139,],[8,11,19,24,19,36,49,36,63,73,73,73,73,73,88,92,96,73,107,114,114,8,73,73,73,73,73,73,73,73,73,73,114,49,143,114,63,]),'dec_f':([5,],[9,]),'funcs':([5,10,17,],[10,17,17,]),'variables':([7,50,139,],[13,61,61,]),'list_ids':([7,23,50,139,],[14,32,14,14,]),'mas_f':([10,17,],[18,27,]),'mas_ids':([15,],[22,]),'body':([16,44,108,110,118,142,],[25,56,130,132,138,152,]),'type':([21,59,82,],[29,80,119,]),'mas_statement':([26,35,],[34,52,]),'statement':([26,35,],[35,35,]),'assign':([26,35,],[37,37,]),'condition':([26,35,],[38,38,]),'cycle':([26,35,],[39,39,]),'f_call':([26,35,],[40,40,]),'print':([26,35,],[41,41,]),'params':([28,117,],[48,137,]),'mas_var':([50,139,],[62,150,]),'expresion':([53,54,55,57,58,69,106,109,112,],[64,74,75,77,78,97,129,131,134,]),'exp':([53,54,55,57,58,69,85,86,87,106,109,112,],[65,65,65,65,65,65,120,121,122,65,65,65,]),'termino':([53,54,55,57,58,69,85,86,87,90,91,106,109,112,],[66,66,66,66,66,66,66,66,66,123,124,66,66,66,]),'factor':([53,54,55,57,58,69,85,86,87,90,91,94,95,106,109,112,],[67,67,67,67,67,67,67,67,67,67,67,125,126,67,67,67,]),'mas_factor':([53,54,55,57,58,69,85,86,87,90,91,94,95,106,109,112,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'signo':([53,54,55,57,58,69,85,86,87,90,91,94,95,106,109,112,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'mas_expresion':([65,],[84,]),'mas_exp':([66,],[89,]),'mas_termino':([67,],[93,]),'cte':([70,71,72,],[99,103,104,]),'mas_f_call':([74,],[105,]),'mas_print':([78,79,113,134,],[111,115,135,147,]),'mas_params':([80,],[116,]),'mas_condition':([130,],[141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END','programa',8,'p_programa','lex.py',105),
  ('vars -> VAR variables COLON type SEMI_COLON mas_var','vars',6,'p_vars','lex.py',112),
  ('vars -> empty','vars',1,'p_vars','lex.py',113),
  ('variables -> list_ids','variables',1,'p_variables','lex.py',116),
  ('mas_var -> variables COLON type SEMI_COLON mas_var','mas_var',5,'p_mas_var','lex.py',120),
  ('mas_var -> empty','mas_var',1,'p_mas_var','lex.py',121),
  ('list_ids -> ID mas_ids','list_ids',2,'p_list_ids','lex.py',124),
  ('mas_ids -> COMMA list_ids','mas_ids',2,'p_mas_ids','lex.py',128),
  ('mas_ids -> empty','mas_ids',1,'p_mas_ids','lex.py',129),
  ('type -> INT','type',1,'p_type','lex.py',132),
  ('type -> FLOAT','type',1,'p_type','lex.py',133),
  ('dec_v -> vars','dec_v',1,'p_dec_v','lex.py',143),
  ('dec_f -> funcs mas_f','dec_f',2,'p_dec_f','lex.py',149),
  ('dec_f -> empty','dec_f',1,'p_dec_f','lex.py',150),
  ('mas_f -> funcs mas_f','mas_f',2,'p_mas_f','lex.py',154),
  ('mas_f -> empty','mas_f',1,'p_mas_f','lex.py',155),
  ('body -> LEFT_CURLY mas_statement RIGHT_CURLY','body',3,'p_body','lex.py',160),
  ('mas_statement -> statement mas_statement','mas_statement',2,'p_mas_statement','lex.py',167),
  ('mas_statement -> empty','mas_statement',1,'p_mas_statement','lex.py',168),
  ('statement -> assign','statement',1,'p_statement','lex.py',182),
  ('statement -> condition','statement',1,'p_statement','lex.py',183),
  ('statement -> cycle','statement',1,'p_statement','lex.py',184),
  ('statement -> f_call','statement',1,'p_statement','lex.py',185),
  ('statement -> print','statement',1,'p_statement','lex.py',186),
  ('assign -> ID EQUAL expresion SEMI_COLON','assign',4,'p_assign','lex.py',193),
  ('expresion -> exp mas_expresion','expresion',2,'p_expresion','lex.py',200),
  ('mas_expresion -> MORE_THAN exp','mas_expresion',2,'p_mas_expresion','lex.py',206),
  ('mas_expresion -> LESS_THAN exp','mas_expresion',2,'p_mas_expresion','lex.py',207),
  ('mas_expresion -> NOT_EQUAL exp','mas_expresion',2,'p_mas_expresion','lex.py',208),
  ('mas_expresion -> empty','mas_expresion',1,'p_mas_expresion','lex.py',209),
  ('exp -> termino mas_exp','exp',2,'p_exp','lex.py',218),
  ('mas_exp -> ADD termino','mas_exp',2,'p_mas_exp','lex.py',224),
  ('mas_exp -> SUBTRACT termino','mas_exp',2,'p_mas_exp','lex.py',225),
  ('mas_exp -> empty','mas_exp',1,'p_mas_exp','lex.py',226),
  ('termino -> factor mas_termino','termino',2,'p_termino','lex.py',232),
  ('mas_termino -> MULTIPLY factor','mas_termino',2,'p_mas_termino','lex.py',238),
  ('mas_termino -> DIVIDE factor','mas_termino',2,'p_mas_termino','lex.py',239),
  ('mas_termino -> empty','mas_termino',1,'p_mas_termino','lex.py',240),
  ('factor -> mas_factor','factor',1,'p_factor','lex.py',246),
  ('mas_factor -> OPEN_PAR expresion CLOSE_PAR','mas_factor',3,'p_mas_factor','lex.py',252),
  ('mas_factor -> signo ID','mas_factor',2,'p_mas_factor','lex.py',253),
  ('mas_factor -> signo cte','mas_factor',2,'p_mas_factor','lex.py',254),
  ('mas_factor -> ADD cte','mas_factor',2,'p_mas_factor','lex.py',255),
  ('mas_factor -> SUBTRACT cte','mas_factor',2,'p_mas_factor','lex.py',256),
  ('signo -> ADD','signo',1,'p_signo','lex.py',265),
  ('signo -> SUBTRACT','signo',1,'p_signo','lex.py',266),
  ('signo -> empty','signo',1,'p_signo','lex.py',267),
  ('cte -> CTE_STRING','cte',1,'p_cte','lex.py',273),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','lex.py',274),
  ('cte -> CTE_INT','cte',1,'p_cte','lex.py',275),
  ('print -> PRINT OPEN_PAR expresion mas_print CLOSE_PAR SEMI_COLON','print',6,'p_print','lex.py',281),
  ('print -> PRINT OPEN_PAR CTE_STRING mas_print CLOSE_PAR SEMI_COLON','print',6,'p_print','lex.py',282),
  ('mas_print -> COMMA expresion mas_print','mas_print',3,'p_mas_print','lex.py',291),
  ('mas_print -> CTE_STRING mas_print','mas_print',2,'p_mas_print','lex.py',292),
  ('mas_print -> empty','mas_print',1,'p_mas_print','lex.py',293),
  ('cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON','cycle',7,'p_cycle','lex.py',305),
  ('cycle -> WHILE OPEN_PAR expresion CLOSE_PAR body SEMI_COLON','cycle',6,'p_cycle','lex.py',306),
  ('condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON','condition',7,'p_condition','lex.py',316),
  ('mas_condition -> ELSE body','mas_condition',2,'p_mas_condition','lex.py',325),
  ('mas_condition -> empty','mas_condition',1,'p_mas_condition','lex.py',326),
  ('f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON','f_call',6,'p_f_call','lex.py',333),
  ('mas_f_call -> COMMA expresion','mas_f_call',2,'p_mas_f_call','lex.py',338),
  ('mas_f_call -> empty','mas_f_call',1,'p_mas_f_call','lex.py',339),
  ('funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON','funcs',10,'p_funcs','lex.py',344),
  ('params -> ID COLON type','params',3,'p_params','lex.py',354),
  ('params -> ID COLON type mas_params','params',4,'p_params','lex.py',355),
  ('params -> empty','params',1,'p_params','lex.py',356),
  ('mas_params -> COMMA params','mas_params',2,'p_mas_params','lex.py',361),
  ('empty -> <empty>','empty',0,'p_empty','lex.py',365),
]
