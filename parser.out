Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END
Rule 2     vars -> VAR variables COLON type SEMI_COLON mas_var
Rule 3     vars -> empty
Rule 4     variables -> list_ids
Rule 5     mas_var -> variables
Rule 6     mas_var -> empty
Rule 7     list_ids -> ID mas_ids
Rule 8     mas_ids -> COMMA list_ids
Rule 9     mas_ids -> empty
Rule 10    type -> INT
Rule 11    type -> FLOAT
Rule 12    dec_v -> vars
Rule 13    dec_f -> funcs mas_f
Rule 14    dec_f -> empty
Rule 15    mas_f -> funcs mas_f
Rule 16    mas_f -> empty
Rule 17    body -> LEFT_CURLY mas_statement RIGHT_CURLY
Rule 18    mas_statement -> statement mas_statement
Rule 19    mas_statement -> empty
Rule 20    statement -> assign
Rule 21    statement -> condition
Rule 22    statement -> cycle
Rule 23    statement -> f_call
Rule 24    statement -> print
Rule 25    assign -> ID EQUAL expresion SEMI_COLON
Rule 26    expresion -> exp mas_expresion
Rule 27    mas_expresion -> MORE_THAN exp
Rule 28    mas_expresion -> LESS_THAN exp
Rule 29    mas_expresion -> NOT_EQUAL exp
Rule 30    mas_expresion -> empty
Rule 31    exp -> termino mas_exp
Rule 32    mas_exp -> ADD termino
Rule 33    mas_exp -> SUBTRACT termino
Rule 34    mas_exp -> empty
Rule 35    termino -> factor mas_termino
Rule 36    mas_termino -> MULTIPLY factor
Rule 37    mas_termino -> DIVIDE factor
Rule 38    mas_termino -> empty
Rule 39    factor -> mas_factor
Rule 40    mas_factor -> OPEN_PAR expresion CLOSE_PAR
Rule 41    mas_factor -> signo ID
Rule 42    mas_factor -> signo cte
Rule 43    mas_factor -> ADD cte
Rule 44    mas_factor -> SUBTRACT cte
Rule 45    signo -> ADD
Rule 46    signo -> SUBTRACT
Rule 47    signo -> empty
Rule 48    cte -> CTE_STRING
Rule 49    cte -> CTE_FLOAT
Rule 50    cte -> CTE_INT
Rule 51    print -> PRINT expresion mas_print SEMI_COLON
Rule 52    print -> PRINT CTE_STRING mas_print
Rule 53    mas_print -> COMMA expresion mas_print
Rule 54    mas_print -> CTE_STRING mas_print
Rule 55    mas_print -> empty
Rule 56    cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON
Rule 57    condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON
Rule 58    mas_condition -> ELSE body
Rule 59    mas_condition -> empty
Rule 60    f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON
Rule 61    mas_f_call -> COMMA expresion
Rule 62    mas_f_call -> empty
Rule 63    funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON
Rule 64    params -> ID COLON type
Rule 65    params -> ID COLON type mas_params
Rule 66    params -> empty
Rule 67    mas_params -> COMMA params
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 32 43 45
CLOSE_PAR            : 40 56 57 60 63
COLON                : 2 64 65
COMMA                : 8 53 61 67
CTE_FLOAT            : 49
CTE_INT              : 50
CTE_STRING           : 48 52 54
DIVIDE               : 37
DO                   : 56
ELSE                 : 58
END                  : 1
EQUAL                : 25
FLOAT                : 11
ID                   : 1 7 25 41 60 63 64 65
IF                   : 57
INT                  : 10
LEFT_CURLY           : 17
LESS_THAN            : 28
L_BRACKET            : 63
MAIN                 : 1
MORE_THAN            : 27
MULTIPLY             : 36
NOT_EQUAL            : 29
OPEN_PAR             : 40 56 57 60 63
PRINT                : 51 52
PROGRAM              : 1
RIGHT_CURLY          : 17
R_BRACKET            : 63
SEMI_COLON           : 1 2 25 51 56 57 60 63
SUBTRACT             : 33 44 46
VAR                  : 2
VOID                 : 63
WHILE                : 56
error                : 

Nonterminals, with rules where they appear

assign               : 20
body                 : 1 56 57 58 63
condition            : 21
cte                  : 42 43 44
cycle                : 22
dec_f                : 1
dec_v                : 1
empty                : 3 6 9 14 16 19 30 34 38 47 55 59 62 66
exp                  : 26 27 28 29
expresion            : 25 40 51 53 56 57 60 61
f_call               : 23
factor               : 35 36 37
funcs                : 13 15
list_ids             : 4 8
mas_condition        : 57
mas_exp              : 31
mas_expresion        : 26
mas_f                : 13 15
mas_f_call           : 60
mas_factor           : 39
mas_ids              : 7
mas_params           : 65
mas_print            : 51 52 53 54
mas_statement        : 17 18
mas_termino          : 35
mas_var              : 2
params               : 63 67
print                : 24
programa             : 0
signo                : 41 42
statement            : 18
termino              : 31 32 33
type                 : 2 64 65
variables            : 2 5
vars                 : 12 63

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMI_COLON dec_v dec_f MAIN body END

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMI_COLON dec_v dec_f MAIN body END

    SEMI_COLON      shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMI_COLON . dec_v dec_f MAIN body END
    (12) dec_v -> . vars
    (2) vars -> . VAR variables COLON type SEMI_COLON mas_var
    (3) vars -> . empty
    (68) empty -> .

    VAR             shift and go to state 7
    VOID            reduce using rule 68 (empty -> .)
    MAIN            reduce using rule 68 (empty -> .)

    dec_v                          shift and go to state 5
    vars                           shift and go to state 6
    empty                          shift and go to state 8

state 5

    (1) programa -> PROGRAM ID SEMI_COLON dec_v . dec_f MAIN body END
    (13) dec_f -> . funcs mas_f
    (14) dec_f -> . empty
    (63) funcs -> . VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON
    (68) empty -> .

    VOID            shift and go to state 12
    MAIN            reduce using rule 68 (empty -> .)

    dec_f                          shift and go to state 9
    funcs                          shift and go to state 10
    empty                          shift and go to state 11

state 6

    (12) dec_v -> vars .

    VOID            reduce using rule 12 (dec_v -> vars .)
    MAIN            reduce using rule 12 (dec_v -> vars .)


state 7

    (2) vars -> VAR . variables COLON type SEMI_COLON mas_var
    (4) variables -> . list_ids
    (7) list_ids -> . ID mas_ids

    ID              shift and go to state 15

    variables                      shift and go to state 13
    list_ids                       shift and go to state 14

state 8

    (3) vars -> empty .

    VOID            reduce using rule 3 (vars -> empty .)
    MAIN            reduce using rule 3 (vars -> empty .)
    LEFT_CURLY      reduce using rule 3 (vars -> empty .)


state 9

    (1) programa -> PROGRAM ID SEMI_COLON dec_v dec_f . MAIN body END

    MAIN            shift and go to state 16


state 10

    (13) dec_f -> funcs . mas_f
    (15) mas_f -> . funcs mas_f
    (16) mas_f -> . empty
    (63) funcs -> . VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON
    (68) empty -> .

    VOID            shift and go to state 12
    MAIN            reduce using rule 68 (empty -> .)

    funcs                          shift and go to state 17
    mas_f                          shift and go to state 18
    empty                          shift and go to state 19

state 11

    (14) dec_f -> empty .

    MAIN            reduce using rule 14 (dec_f -> empty .)


state 12

    (63) funcs -> VOID . ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON

    ID              shift and go to state 20


state 13

    (2) vars -> VAR variables . COLON type SEMI_COLON mas_var

    COLON           shift and go to state 21


state 14

    (4) variables -> list_ids .

    COLON           reduce using rule 4 (variables -> list_ids .)
    VOID            reduce using rule 4 (variables -> list_ids .)
    MAIN            reduce using rule 4 (variables -> list_ids .)
    LEFT_CURLY      reduce using rule 4 (variables -> list_ids .)


state 15

    (7) list_ids -> ID . mas_ids
    (8) mas_ids -> . COMMA list_ids
    (9) mas_ids -> . empty
    (68) empty -> .

    COMMA           shift and go to state 23
    COLON           reduce using rule 68 (empty -> .)
    VOID            reduce using rule 68 (empty -> .)
    MAIN            reduce using rule 68 (empty -> .)
    LEFT_CURLY      reduce using rule 68 (empty -> .)

    mas_ids                        shift and go to state 22
    empty                          shift and go to state 24

state 16

    (1) programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN . body END
    (17) body -> . LEFT_CURLY mas_statement RIGHT_CURLY

    LEFT_CURLY      shift and go to state 26

    body                           shift and go to state 25

state 17

    (15) mas_f -> funcs . mas_f
    (15) mas_f -> . funcs mas_f
    (16) mas_f -> . empty
    (63) funcs -> . VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON
    (68) empty -> .

    VOID            shift and go to state 12
    MAIN            reduce using rule 68 (empty -> .)

    funcs                          shift and go to state 17
    mas_f                          shift and go to state 27
    empty                          shift and go to state 19

state 18

    (13) dec_f -> funcs mas_f .

    MAIN            reduce using rule 13 (dec_f -> funcs mas_f .)


state 19

    (16) mas_f -> empty .

    MAIN            reduce using rule 16 (mas_f -> empty .)


state 20

    (63) funcs -> VOID ID . OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON

    OPEN_PAR        shift and go to state 28


state 21

    (2) vars -> VAR variables COLON . type SEMI_COLON mas_var
    (10) type -> . INT
    (11) type -> . FLOAT

    INT             shift and go to state 30
    FLOAT           shift and go to state 31

    type                           shift and go to state 29

state 22

    (7) list_ids -> ID mas_ids .

    COLON           reduce using rule 7 (list_ids -> ID mas_ids .)
    VOID            reduce using rule 7 (list_ids -> ID mas_ids .)
    MAIN            reduce using rule 7 (list_ids -> ID mas_ids .)
    LEFT_CURLY      reduce using rule 7 (list_ids -> ID mas_ids .)


state 23

    (8) mas_ids -> COMMA . list_ids
    (7) list_ids -> . ID mas_ids

    ID              shift and go to state 15

    list_ids                       shift and go to state 32

state 24

    (9) mas_ids -> empty .

    COLON           reduce using rule 9 (mas_ids -> empty .)
    VOID            reduce using rule 9 (mas_ids -> empty .)
    MAIN            reduce using rule 9 (mas_ids -> empty .)
    LEFT_CURLY      reduce using rule 9 (mas_ids -> empty .)


state 25

    (1) programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN body . END

    END             shift and go to state 33


state 26

    (17) body -> LEFT_CURLY . mas_statement RIGHT_CURLY
    (18) mas_statement -> . statement mas_statement
    (19) mas_statement -> . empty
    (20) statement -> . assign
    (21) statement -> . condition
    (22) statement -> . cycle
    (23) statement -> . f_call
    (24) statement -> . print
    (68) empty -> .
    (25) assign -> . ID EQUAL expresion SEMI_COLON
    (57) condition -> . IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON
    (56) cycle -> . DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON
    (60) f_call -> . ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON
    (51) print -> . PRINT expresion mas_print SEMI_COLON
    (52) print -> . PRINT CTE_STRING mas_print

    RIGHT_CURLY     reduce using rule 68 (empty -> .)
    ID              shift and go to state 42
    IF              shift and go to state 43
    DO              shift and go to state 44
    PRINT           shift and go to state 45

    mas_statement                  shift and go to state 34
    statement                      shift and go to state 35
    empty                          shift and go to state 36
    assign                         shift and go to state 37
    condition                      shift and go to state 38
    cycle                          shift and go to state 39
    f_call                         shift and go to state 40
    print                          shift and go to state 41

state 27

    (15) mas_f -> funcs mas_f .

    MAIN            reduce using rule 15 (mas_f -> funcs mas_f .)


state 28

    (63) funcs -> VOID ID OPEN_PAR . params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON
    (64) params -> . ID COLON type
    (65) params -> . ID COLON type mas_params
    (66) params -> . empty
    (68) empty -> .

    ID              shift and go to state 46
    CLOSE_PAR       reduce using rule 68 (empty -> .)

    params                         shift and go to state 47
    empty                          shift and go to state 48

state 29

    (2) vars -> VAR variables COLON type . SEMI_COLON mas_var

    SEMI_COLON      shift and go to state 49


state 30

    (10) type -> INT .

    SEMI_COLON      reduce using rule 10 (type -> INT .)
    COMMA           reduce using rule 10 (type -> INT .)
    CLOSE_PAR       reduce using rule 10 (type -> INT .)


state 31

    (11) type -> FLOAT .

    SEMI_COLON      reduce using rule 11 (type -> FLOAT .)
    COMMA           reduce using rule 11 (type -> FLOAT .)
    CLOSE_PAR       reduce using rule 11 (type -> FLOAT .)


state 32

    (8) mas_ids -> COMMA list_ids .

    COLON           reduce using rule 8 (mas_ids -> COMMA list_ids .)
    VOID            reduce using rule 8 (mas_ids -> COMMA list_ids .)
    MAIN            reduce using rule 8 (mas_ids -> COMMA list_ids .)
    LEFT_CURLY      reduce using rule 8 (mas_ids -> COMMA list_ids .)


state 33

    (1) programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMI_COLON dec_v dec_f MAIN body END .)


state 34

    (17) body -> LEFT_CURLY mas_statement . RIGHT_CURLY

    RIGHT_CURLY     shift and go to state 50


state 35

    (18) mas_statement -> statement . mas_statement
    (18) mas_statement -> . statement mas_statement
    (19) mas_statement -> . empty
    (20) statement -> . assign
    (21) statement -> . condition
    (22) statement -> . cycle
    (23) statement -> . f_call
    (24) statement -> . print
    (68) empty -> .
    (25) assign -> . ID EQUAL expresion SEMI_COLON
    (57) condition -> . IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON
    (56) cycle -> . DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON
    (60) f_call -> . ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON
    (51) print -> . PRINT expresion mas_print SEMI_COLON
    (52) print -> . PRINT CTE_STRING mas_print

    RIGHT_CURLY     reduce using rule 68 (empty -> .)
    ID              shift and go to state 42
    IF              shift and go to state 43
    DO              shift and go to state 44
    PRINT           shift and go to state 45

    statement                      shift and go to state 35
    mas_statement                  shift and go to state 51
    empty                          shift and go to state 36
    assign                         shift and go to state 37
    condition                      shift and go to state 38
    cycle                          shift and go to state 39
    f_call                         shift and go to state 40
    print                          shift and go to state 41

state 36

    (19) mas_statement -> empty .

    RIGHT_CURLY     reduce using rule 19 (mas_statement -> empty .)


state 37

    (20) statement -> assign .

    ID              reduce using rule 20 (statement -> assign .)
    IF              reduce using rule 20 (statement -> assign .)
    DO              reduce using rule 20 (statement -> assign .)
    PRINT           reduce using rule 20 (statement -> assign .)
    RIGHT_CURLY     reduce using rule 20 (statement -> assign .)


state 38

    (21) statement -> condition .

    ID              reduce using rule 21 (statement -> condition .)
    IF              reduce using rule 21 (statement -> condition .)
    DO              reduce using rule 21 (statement -> condition .)
    PRINT           reduce using rule 21 (statement -> condition .)
    RIGHT_CURLY     reduce using rule 21 (statement -> condition .)


state 39

    (22) statement -> cycle .

    ID              reduce using rule 22 (statement -> cycle .)
    IF              reduce using rule 22 (statement -> cycle .)
    DO              reduce using rule 22 (statement -> cycle .)
    PRINT           reduce using rule 22 (statement -> cycle .)
    RIGHT_CURLY     reduce using rule 22 (statement -> cycle .)


state 40

    (23) statement -> f_call .

    ID              reduce using rule 23 (statement -> f_call .)
    IF              reduce using rule 23 (statement -> f_call .)
    DO              reduce using rule 23 (statement -> f_call .)
    PRINT           reduce using rule 23 (statement -> f_call .)
    RIGHT_CURLY     reduce using rule 23 (statement -> f_call .)


state 41

    (24) statement -> print .

    ID              reduce using rule 24 (statement -> print .)
    IF              reduce using rule 24 (statement -> print .)
    DO              reduce using rule 24 (statement -> print .)
    PRINT           reduce using rule 24 (statement -> print .)
    RIGHT_CURLY     reduce using rule 24 (statement -> print .)


state 42

    (25) assign -> ID . EQUAL expresion SEMI_COLON
    (60) f_call -> ID . OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON

    EQUAL           shift and go to state 52
    OPEN_PAR        shift and go to state 53


state 43

    (57) condition -> IF . OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON

    OPEN_PAR        shift and go to state 54


state 44

    (56) cycle -> DO . body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON
    (17) body -> . LEFT_CURLY mas_statement RIGHT_CURLY

    LEFT_CURLY      shift and go to state 26

    body                           shift and go to state 55

state 45

    (51) print -> PRINT . expresion mas_print SEMI_COLON
    (52) print -> PRINT . CTE_STRING mas_print
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

  ! shift/reduce conflict for CTE_STRING resolved as shift
    CTE_STRING      shift and go to state 57
    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

  ! CTE_STRING      [ reduce using rule 68 (empty -> .) ]

    expresion                      shift and go to state 56
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 46

    (64) params -> ID . COLON type
    (65) params -> ID . COLON type mas_params

    COLON           shift and go to state 67


state 47

    (63) funcs -> VOID ID OPEN_PAR params . CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON

    CLOSE_PAR       shift and go to state 68


state 48

    (66) params -> empty .

    CLOSE_PAR       reduce using rule 66 (params -> empty .)


state 49

    (2) vars -> VAR variables COLON type SEMI_COLON . mas_var
    (5) mas_var -> . variables
    (6) mas_var -> . empty
    (4) variables -> . list_ids
    (68) empty -> .
    (7) list_ids -> . ID mas_ids

    VOID            reduce using rule 68 (empty -> .)
    MAIN            reduce using rule 68 (empty -> .)
    LEFT_CURLY      reduce using rule 68 (empty -> .)
    ID              shift and go to state 15

    variables                      shift and go to state 69
    mas_var                        shift and go to state 70
    empty                          shift and go to state 71
    list_ids                       shift and go to state 14

state 50

    (17) body -> LEFT_CURLY mas_statement RIGHT_CURLY .

    END             reduce using rule 17 (body -> LEFT_CURLY mas_statement RIGHT_CURLY .)
    WHILE           reduce using rule 17 (body -> LEFT_CURLY mas_statement RIGHT_CURLY .)
    ELSE            reduce using rule 17 (body -> LEFT_CURLY mas_statement RIGHT_CURLY .)
    SEMI_COLON      reduce using rule 17 (body -> LEFT_CURLY mas_statement RIGHT_CURLY .)
    R_BRACKET       reduce using rule 17 (body -> LEFT_CURLY mas_statement RIGHT_CURLY .)


state 51

    (18) mas_statement -> statement mas_statement .

    RIGHT_CURLY     reduce using rule 18 (mas_statement -> statement mas_statement .)


state 52

    (25) assign -> ID EQUAL . expresion SEMI_COLON
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    expresion                      shift and go to state 72
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 53

    (60) f_call -> ID OPEN_PAR . expresion mas_f_call CLOSE_PAR SEMI_COLON
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    expresion                      shift and go to state 73
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 54

    (57) condition -> IF OPEN_PAR . expresion CLOSE_PAR body mas_condition SEMI_COLON
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    expresion                      shift and go to state 74
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 55

    (56) cycle -> DO body . WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON

    WHILE           shift and go to state 75


state 56

    (51) print -> PRINT expresion . mas_print SEMI_COLON
    (53) mas_print -> . COMMA expresion mas_print
    (54) mas_print -> . CTE_STRING mas_print
    (55) mas_print -> . empty
    (68) empty -> .

    COMMA           shift and go to state 77
    CTE_STRING      shift and go to state 78
    SEMI_COLON      reduce using rule 68 (empty -> .)

    mas_print                      shift and go to state 76
    empty                          shift and go to state 79

state 57

    (52) print -> PRINT CTE_STRING . mas_print
    (53) mas_print -> . COMMA expresion mas_print
    (54) mas_print -> . CTE_STRING mas_print
    (55) mas_print -> . empty
    (68) empty -> .

    COMMA           shift and go to state 77
    CTE_STRING      shift and go to state 78
    ID              reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    RIGHT_CURLY     reduce using rule 68 (empty -> .)

    mas_print                      shift and go to state 80
    empty                          shift and go to state 79

state 58

    (26) expresion -> exp . mas_expresion
    (27) mas_expresion -> . MORE_THAN exp
    (28) mas_expresion -> . LESS_THAN exp
    (29) mas_expresion -> . NOT_EQUAL exp
    (30) mas_expresion -> . empty
    (68) empty -> .

    MORE_THAN       shift and go to state 82
    LESS_THAN       shift and go to state 83
    NOT_EQUAL       shift and go to state 84
    COMMA           reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    SEMI_COLON      reduce using rule 68 (empty -> .)
    CLOSE_PAR       reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    RIGHT_CURLY     reduce using rule 68 (empty -> .)

    mas_expresion                  shift and go to state 81
    empty                          shift and go to state 85

state 59

    (31) exp -> termino . mas_exp
    (32) mas_exp -> . ADD termino
    (33) mas_exp -> . SUBTRACT termino
    (34) mas_exp -> . empty
    (68) empty -> .

    ADD             shift and go to state 87
    SUBTRACT        shift and go to state 88
    MORE_THAN       reduce using rule 68 (empty -> .)
    LESS_THAN       reduce using rule 68 (empty -> .)
    NOT_EQUAL       reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    SEMI_COLON      reduce using rule 68 (empty -> .)
    CLOSE_PAR       reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    RIGHT_CURLY     reduce using rule 68 (empty -> .)

    mas_exp                        shift and go to state 86
    empty                          shift and go to state 89

state 60

    (35) termino -> factor . mas_termino
    (36) mas_termino -> . MULTIPLY factor
    (37) mas_termino -> . DIVIDE factor
    (38) mas_termino -> . empty
    (68) empty -> .

    MULTIPLY        shift and go to state 91
    DIVIDE          shift and go to state 92
    ADD             reduce using rule 68 (empty -> .)
    SUBTRACT        reduce using rule 68 (empty -> .)
    MORE_THAN       reduce using rule 68 (empty -> .)
    LESS_THAN       reduce using rule 68 (empty -> .)
    NOT_EQUAL       reduce using rule 68 (empty -> .)
    COMMA           reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    SEMI_COLON      reduce using rule 68 (empty -> .)
    CLOSE_PAR       reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    RIGHT_CURLY     reduce using rule 68 (empty -> .)

    mas_termino                    shift and go to state 90
    empty                          shift and go to state 93

state 61

    (39) factor -> mas_factor .

    MULTIPLY        reduce using rule 39 (factor -> mas_factor .)
    DIVIDE          reduce using rule 39 (factor -> mas_factor .)
    ADD             reduce using rule 39 (factor -> mas_factor .)
    SUBTRACT        reduce using rule 39 (factor -> mas_factor .)
    MORE_THAN       reduce using rule 39 (factor -> mas_factor .)
    LESS_THAN       reduce using rule 39 (factor -> mas_factor .)
    NOT_EQUAL       reduce using rule 39 (factor -> mas_factor .)
    COMMA           reduce using rule 39 (factor -> mas_factor .)
    CTE_STRING      reduce using rule 39 (factor -> mas_factor .)
    SEMI_COLON      reduce using rule 39 (factor -> mas_factor .)
    CLOSE_PAR       reduce using rule 39 (factor -> mas_factor .)
    ID              reduce using rule 39 (factor -> mas_factor .)
    IF              reduce using rule 39 (factor -> mas_factor .)
    DO              reduce using rule 39 (factor -> mas_factor .)
    PRINT           reduce using rule 39 (factor -> mas_factor .)
    RIGHT_CURLY     reduce using rule 39 (factor -> mas_factor .)


state 62

    (40) mas_factor -> OPEN_PAR . expresion CLOSE_PAR
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    expresion                      shift and go to state 94
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 63

    (41) mas_factor -> signo . ID
    (42) mas_factor -> signo . cte
    (48) cte -> . CTE_STRING
    (49) cte -> . CTE_FLOAT
    (50) cte -> . CTE_INT

    ID              shift and go to state 95
    CTE_STRING      shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    CTE_INT         shift and go to state 99

    cte                            shift and go to state 96

state 64

    (43) mas_factor -> ADD . cte
    (45) signo -> ADD .
    (48) cte -> . CTE_STRING
    (49) cte -> . CTE_FLOAT
    (50) cte -> . CTE_INT

  ! shift/reduce conflict for CTE_STRING resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
    ID              reduce using rule 45 (signo -> ADD .)
    CTE_STRING      shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    CTE_INT         shift and go to state 99

  ! CTE_STRING      [ reduce using rule 45 (signo -> ADD .) ]
  ! CTE_FLOAT       [ reduce using rule 45 (signo -> ADD .) ]
  ! CTE_INT         [ reduce using rule 45 (signo -> ADD .) ]

    cte                            shift and go to state 100

state 65

    (44) mas_factor -> SUBTRACT . cte
    (46) signo -> SUBTRACT .
    (48) cte -> . CTE_STRING
    (49) cte -> . CTE_FLOAT
    (50) cte -> . CTE_INT

  ! shift/reduce conflict for CTE_STRING resolved as shift
  ! shift/reduce conflict for CTE_FLOAT resolved as shift
  ! shift/reduce conflict for CTE_INT resolved as shift
    ID              reduce using rule 46 (signo -> SUBTRACT .)
    CTE_STRING      shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    CTE_INT         shift and go to state 99

  ! CTE_STRING      [ reduce using rule 46 (signo -> SUBTRACT .) ]
  ! CTE_FLOAT       [ reduce using rule 46 (signo -> SUBTRACT .) ]
  ! CTE_INT         [ reduce using rule 46 (signo -> SUBTRACT .) ]

    cte                            shift and go to state 101

state 66

    (47) signo -> empty .

    ID              reduce using rule 47 (signo -> empty .)
    CTE_STRING      reduce using rule 47 (signo -> empty .)
    CTE_FLOAT       reduce using rule 47 (signo -> empty .)
    CTE_INT         reduce using rule 47 (signo -> empty .)


state 67

    (64) params -> ID COLON . type
    (65) params -> ID COLON . type mas_params
    (10) type -> . INT
    (11) type -> . FLOAT

    INT             shift and go to state 30
    FLOAT           shift and go to state 31

    type                           shift and go to state 102

state 68

    (63) funcs -> VOID ID OPEN_PAR params CLOSE_PAR . L_BRACKET vars body R_BRACKET SEMI_COLON

    L_BRACKET       shift and go to state 103


state 69

    (5) mas_var -> variables .

    VOID            reduce using rule 5 (mas_var -> variables .)
    MAIN            reduce using rule 5 (mas_var -> variables .)
    LEFT_CURLY      reduce using rule 5 (mas_var -> variables .)


state 70

    (2) vars -> VAR variables COLON type SEMI_COLON mas_var .

    VOID            reduce using rule 2 (vars -> VAR variables COLON type SEMI_COLON mas_var .)
    MAIN            reduce using rule 2 (vars -> VAR variables COLON type SEMI_COLON mas_var .)
    LEFT_CURLY      reduce using rule 2 (vars -> VAR variables COLON type SEMI_COLON mas_var .)


state 71

    (6) mas_var -> empty .

    VOID            reduce using rule 6 (mas_var -> empty .)
    MAIN            reduce using rule 6 (mas_var -> empty .)
    LEFT_CURLY      reduce using rule 6 (mas_var -> empty .)


state 72

    (25) assign -> ID EQUAL expresion . SEMI_COLON

    SEMI_COLON      shift and go to state 104


state 73

    (60) f_call -> ID OPEN_PAR expresion . mas_f_call CLOSE_PAR SEMI_COLON
    (61) mas_f_call -> . COMMA expresion
    (62) mas_f_call -> . empty
    (68) empty -> .

    COMMA           shift and go to state 106
    CLOSE_PAR       reduce using rule 68 (empty -> .)

    mas_f_call                     shift and go to state 105
    empty                          shift and go to state 107

state 74

    (57) condition -> IF OPEN_PAR expresion . CLOSE_PAR body mas_condition SEMI_COLON

    CLOSE_PAR       shift and go to state 108


state 75

    (56) cycle -> DO body WHILE . OPEN_PAR expresion CLOSE_PAR SEMI_COLON

    OPEN_PAR        shift and go to state 109


state 76

    (51) print -> PRINT expresion mas_print . SEMI_COLON

    SEMI_COLON      shift and go to state 110


state 77

    (53) mas_print -> COMMA . expresion mas_print
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    expresion                      shift and go to state 111
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 78

    (54) mas_print -> CTE_STRING . mas_print
    (53) mas_print -> . COMMA expresion mas_print
    (54) mas_print -> . CTE_STRING mas_print
    (55) mas_print -> . empty
    (68) empty -> .

    COMMA           shift and go to state 77
    CTE_STRING      shift and go to state 78
    SEMI_COLON      reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    RIGHT_CURLY     reduce using rule 68 (empty -> .)

    mas_print                      shift and go to state 112
    empty                          shift and go to state 79

state 79

    (55) mas_print -> empty .

    SEMI_COLON      reduce using rule 55 (mas_print -> empty .)
    ID              reduce using rule 55 (mas_print -> empty .)
    IF              reduce using rule 55 (mas_print -> empty .)
    DO              reduce using rule 55 (mas_print -> empty .)
    PRINT           reduce using rule 55 (mas_print -> empty .)
    RIGHT_CURLY     reduce using rule 55 (mas_print -> empty .)


state 80

    (52) print -> PRINT CTE_STRING mas_print .

    ID              reduce using rule 52 (print -> PRINT CTE_STRING mas_print .)
    IF              reduce using rule 52 (print -> PRINT CTE_STRING mas_print .)
    DO              reduce using rule 52 (print -> PRINT CTE_STRING mas_print .)
    PRINT           reduce using rule 52 (print -> PRINT CTE_STRING mas_print .)
    RIGHT_CURLY     reduce using rule 52 (print -> PRINT CTE_STRING mas_print .)


state 81

    (26) expresion -> exp mas_expresion .

    COMMA           reduce using rule 26 (expresion -> exp mas_expresion .)
    CTE_STRING      reduce using rule 26 (expresion -> exp mas_expresion .)
    SEMI_COLON      reduce using rule 26 (expresion -> exp mas_expresion .)
    CLOSE_PAR       reduce using rule 26 (expresion -> exp mas_expresion .)
    ID              reduce using rule 26 (expresion -> exp mas_expresion .)
    IF              reduce using rule 26 (expresion -> exp mas_expresion .)
    DO              reduce using rule 26 (expresion -> exp mas_expresion .)
    PRINT           reduce using rule 26 (expresion -> exp mas_expresion .)
    RIGHT_CURLY     reduce using rule 26 (expresion -> exp mas_expresion .)


state 82

    (27) mas_expresion -> MORE_THAN . exp
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    exp                            shift and go to state 113
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 83

    (28) mas_expresion -> LESS_THAN . exp
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    exp                            shift and go to state 114
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 84

    (29) mas_expresion -> NOT_EQUAL . exp
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    exp                            shift and go to state 115
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 85

    (30) mas_expresion -> empty .

    COMMA           reduce using rule 30 (mas_expresion -> empty .)
    CTE_STRING      reduce using rule 30 (mas_expresion -> empty .)
    SEMI_COLON      reduce using rule 30 (mas_expresion -> empty .)
    CLOSE_PAR       reduce using rule 30 (mas_expresion -> empty .)
    ID              reduce using rule 30 (mas_expresion -> empty .)
    IF              reduce using rule 30 (mas_expresion -> empty .)
    DO              reduce using rule 30 (mas_expresion -> empty .)
    PRINT           reduce using rule 30 (mas_expresion -> empty .)
    RIGHT_CURLY     reduce using rule 30 (mas_expresion -> empty .)


state 86

    (31) exp -> termino mas_exp .

    MORE_THAN       reduce using rule 31 (exp -> termino mas_exp .)
    LESS_THAN       reduce using rule 31 (exp -> termino mas_exp .)
    NOT_EQUAL       reduce using rule 31 (exp -> termino mas_exp .)
    COMMA           reduce using rule 31 (exp -> termino mas_exp .)
    CTE_STRING      reduce using rule 31 (exp -> termino mas_exp .)
    SEMI_COLON      reduce using rule 31 (exp -> termino mas_exp .)
    CLOSE_PAR       reduce using rule 31 (exp -> termino mas_exp .)
    ID              reduce using rule 31 (exp -> termino mas_exp .)
    IF              reduce using rule 31 (exp -> termino mas_exp .)
    DO              reduce using rule 31 (exp -> termino mas_exp .)
    PRINT           reduce using rule 31 (exp -> termino mas_exp .)
    RIGHT_CURLY     reduce using rule 31 (exp -> termino mas_exp .)


state 87

    (32) mas_exp -> ADD . termino
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    termino                        shift and go to state 116
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 88

    (33) mas_exp -> SUBTRACT . termino
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    termino                        shift and go to state 117
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 89

    (34) mas_exp -> empty .

    MORE_THAN       reduce using rule 34 (mas_exp -> empty .)
    LESS_THAN       reduce using rule 34 (mas_exp -> empty .)
    NOT_EQUAL       reduce using rule 34 (mas_exp -> empty .)
    COMMA           reduce using rule 34 (mas_exp -> empty .)
    CTE_STRING      reduce using rule 34 (mas_exp -> empty .)
    SEMI_COLON      reduce using rule 34 (mas_exp -> empty .)
    CLOSE_PAR       reduce using rule 34 (mas_exp -> empty .)
    ID              reduce using rule 34 (mas_exp -> empty .)
    IF              reduce using rule 34 (mas_exp -> empty .)
    DO              reduce using rule 34 (mas_exp -> empty .)
    PRINT           reduce using rule 34 (mas_exp -> empty .)
    RIGHT_CURLY     reduce using rule 34 (mas_exp -> empty .)


state 90

    (35) termino -> factor mas_termino .

    ADD             reduce using rule 35 (termino -> factor mas_termino .)
    SUBTRACT        reduce using rule 35 (termino -> factor mas_termino .)
    MORE_THAN       reduce using rule 35 (termino -> factor mas_termino .)
    LESS_THAN       reduce using rule 35 (termino -> factor mas_termino .)
    NOT_EQUAL       reduce using rule 35 (termino -> factor mas_termino .)
    COMMA           reduce using rule 35 (termino -> factor mas_termino .)
    CTE_STRING      reduce using rule 35 (termino -> factor mas_termino .)
    SEMI_COLON      reduce using rule 35 (termino -> factor mas_termino .)
    CLOSE_PAR       reduce using rule 35 (termino -> factor mas_termino .)
    ID              reduce using rule 35 (termino -> factor mas_termino .)
    IF              reduce using rule 35 (termino -> factor mas_termino .)
    DO              reduce using rule 35 (termino -> factor mas_termino .)
    PRINT           reduce using rule 35 (termino -> factor mas_termino .)
    RIGHT_CURLY     reduce using rule 35 (termino -> factor mas_termino .)


state 91

    (36) mas_termino -> MULTIPLY . factor
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    factor                         shift and go to state 118
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 92

    (37) mas_termino -> DIVIDE . factor
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    factor                         shift and go to state 119
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 93

    (38) mas_termino -> empty .

    ADD             reduce using rule 38 (mas_termino -> empty .)
    SUBTRACT        reduce using rule 38 (mas_termino -> empty .)
    MORE_THAN       reduce using rule 38 (mas_termino -> empty .)
    LESS_THAN       reduce using rule 38 (mas_termino -> empty .)
    NOT_EQUAL       reduce using rule 38 (mas_termino -> empty .)
    COMMA           reduce using rule 38 (mas_termino -> empty .)
    CTE_STRING      reduce using rule 38 (mas_termino -> empty .)
    SEMI_COLON      reduce using rule 38 (mas_termino -> empty .)
    CLOSE_PAR       reduce using rule 38 (mas_termino -> empty .)
    ID              reduce using rule 38 (mas_termino -> empty .)
    IF              reduce using rule 38 (mas_termino -> empty .)
    DO              reduce using rule 38 (mas_termino -> empty .)
    PRINT           reduce using rule 38 (mas_termino -> empty .)
    RIGHT_CURLY     reduce using rule 38 (mas_termino -> empty .)


state 94

    (40) mas_factor -> OPEN_PAR expresion . CLOSE_PAR

    CLOSE_PAR       shift and go to state 120


state 95

    (41) mas_factor -> signo ID .

    MULTIPLY        reduce using rule 41 (mas_factor -> signo ID .)
    DIVIDE          reduce using rule 41 (mas_factor -> signo ID .)
    ADD             reduce using rule 41 (mas_factor -> signo ID .)
    SUBTRACT        reduce using rule 41 (mas_factor -> signo ID .)
    MORE_THAN       reduce using rule 41 (mas_factor -> signo ID .)
    LESS_THAN       reduce using rule 41 (mas_factor -> signo ID .)
    NOT_EQUAL       reduce using rule 41 (mas_factor -> signo ID .)
    COMMA           reduce using rule 41 (mas_factor -> signo ID .)
    CTE_STRING      reduce using rule 41 (mas_factor -> signo ID .)
    SEMI_COLON      reduce using rule 41 (mas_factor -> signo ID .)
    CLOSE_PAR       reduce using rule 41 (mas_factor -> signo ID .)
    ID              reduce using rule 41 (mas_factor -> signo ID .)
    IF              reduce using rule 41 (mas_factor -> signo ID .)
    DO              reduce using rule 41 (mas_factor -> signo ID .)
    PRINT           reduce using rule 41 (mas_factor -> signo ID .)
    RIGHT_CURLY     reduce using rule 41 (mas_factor -> signo ID .)


state 96

    (42) mas_factor -> signo cte .

    MULTIPLY        reduce using rule 42 (mas_factor -> signo cte .)
    DIVIDE          reduce using rule 42 (mas_factor -> signo cte .)
    ADD             reduce using rule 42 (mas_factor -> signo cte .)
    SUBTRACT        reduce using rule 42 (mas_factor -> signo cte .)
    MORE_THAN       reduce using rule 42 (mas_factor -> signo cte .)
    LESS_THAN       reduce using rule 42 (mas_factor -> signo cte .)
    NOT_EQUAL       reduce using rule 42 (mas_factor -> signo cte .)
    COMMA           reduce using rule 42 (mas_factor -> signo cte .)
    CTE_STRING      reduce using rule 42 (mas_factor -> signo cte .)
    SEMI_COLON      reduce using rule 42 (mas_factor -> signo cte .)
    CLOSE_PAR       reduce using rule 42 (mas_factor -> signo cte .)
    ID              reduce using rule 42 (mas_factor -> signo cte .)
    IF              reduce using rule 42 (mas_factor -> signo cte .)
    DO              reduce using rule 42 (mas_factor -> signo cte .)
    PRINT           reduce using rule 42 (mas_factor -> signo cte .)
    RIGHT_CURLY     reduce using rule 42 (mas_factor -> signo cte .)


state 97

    (48) cte -> CTE_STRING .

    MULTIPLY        reduce using rule 48 (cte -> CTE_STRING .)
    DIVIDE          reduce using rule 48 (cte -> CTE_STRING .)
    ADD             reduce using rule 48 (cte -> CTE_STRING .)
    SUBTRACT        reduce using rule 48 (cte -> CTE_STRING .)
    MORE_THAN       reduce using rule 48 (cte -> CTE_STRING .)
    LESS_THAN       reduce using rule 48 (cte -> CTE_STRING .)
    NOT_EQUAL       reduce using rule 48 (cte -> CTE_STRING .)
    COMMA           reduce using rule 48 (cte -> CTE_STRING .)
    CTE_STRING      reduce using rule 48 (cte -> CTE_STRING .)
    SEMI_COLON      reduce using rule 48 (cte -> CTE_STRING .)
    CLOSE_PAR       reduce using rule 48 (cte -> CTE_STRING .)
    ID              reduce using rule 48 (cte -> CTE_STRING .)
    IF              reduce using rule 48 (cte -> CTE_STRING .)
    DO              reduce using rule 48 (cte -> CTE_STRING .)
    PRINT           reduce using rule 48 (cte -> CTE_STRING .)
    RIGHT_CURLY     reduce using rule 48 (cte -> CTE_STRING .)


state 98

    (49) cte -> CTE_FLOAT .

    MULTIPLY        reduce using rule 49 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 49 (cte -> CTE_FLOAT .)
    ADD             reduce using rule 49 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 49 (cte -> CTE_FLOAT .)
    MORE_THAN       reduce using rule 49 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 49 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 49 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 49 (cte -> CTE_FLOAT .)
    CTE_STRING      reduce using rule 49 (cte -> CTE_FLOAT .)
    SEMI_COLON      reduce using rule 49 (cte -> CTE_FLOAT .)
    CLOSE_PAR       reduce using rule 49 (cte -> CTE_FLOAT .)
    ID              reduce using rule 49 (cte -> CTE_FLOAT .)
    IF              reduce using rule 49 (cte -> CTE_FLOAT .)
    DO              reduce using rule 49 (cte -> CTE_FLOAT .)
    PRINT           reduce using rule 49 (cte -> CTE_FLOAT .)
    RIGHT_CURLY     reduce using rule 49 (cte -> CTE_FLOAT .)


state 99

    (50) cte -> CTE_INT .

    MULTIPLY        reduce using rule 50 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 50 (cte -> CTE_INT .)
    ADD             reduce using rule 50 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 50 (cte -> CTE_INT .)
    MORE_THAN       reduce using rule 50 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 50 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 50 (cte -> CTE_INT .)
    COMMA           reduce using rule 50 (cte -> CTE_INT .)
    CTE_STRING      reduce using rule 50 (cte -> CTE_INT .)
    SEMI_COLON      reduce using rule 50 (cte -> CTE_INT .)
    CLOSE_PAR       reduce using rule 50 (cte -> CTE_INT .)
    ID              reduce using rule 50 (cte -> CTE_INT .)
    IF              reduce using rule 50 (cte -> CTE_INT .)
    DO              reduce using rule 50 (cte -> CTE_INT .)
    PRINT           reduce using rule 50 (cte -> CTE_INT .)
    RIGHT_CURLY     reduce using rule 50 (cte -> CTE_INT .)


state 100

    (43) mas_factor -> ADD cte .

    MULTIPLY        reduce using rule 43 (mas_factor -> ADD cte .)
    DIVIDE          reduce using rule 43 (mas_factor -> ADD cte .)
    ADD             reduce using rule 43 (mas_factor -> ADD cte .)
    SUBTRACT        reduce using rule 43 (mas_factor -> ADD cte .)
    MORE_THAN       reduce using rule 43 (mas_factor -> ADD cte .)
    LESS_THAN       reduce using rule 43 (mas_factor -> ADD cte .)
    NOT_EQUAL       reduce using rule 43 (mas_factor -> ADD cte .)
    COMMA           reduce using rule 43 (mas_factor -> ADD cte .)
    CTE_STRING      reduce using rule 43 (mas_factor -> ADD cte .)
    SEMI_COLON      reduce using rule 43 (mas_factor -> ADD cte .)
    CLOSE_PAR       reduce using rule 43 (mas_factor -> ADD cte .)
    ID              reduce using rule 43 (mas_factor -> ADD cte .)
    IF              reduce using rule 43 (mas_factor -> ADD cte .)
    DO              reduce using rule 43 (mas_factor -> ADD cte .)
    PRINT           reduce using rule 43 (mas_factor -> ADD cte .)
    RIGHT_CURLY     reduce using rule 43 (mas_factor -> ADD cte .)


state 101

    (44) mas_factor -> SUBTRACT cte .

    MULTIPLY        reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    DIVIDE          reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    ADD             reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    SUBTRACT        reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    MORE_THAN       reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    LESS_THAN       reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    NOT_EQUAL       reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    COMMA           reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    CTE_STRING      reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    SEMI_COLON      reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    CLOSE_PAR       reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    ID              reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    IF              reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    DO              reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    PRINT           reduce using rule 44 (mas_factor -> SUBTRACT cte .)
    RIGHT_CURLY     reduce using rule 44 (mas_factor -> SUBTRACT cte .)


state 102

    (64) params -> ID COLON type .
    (65) params -> ID COLON type . mas_params
    (67) mas_params -> . COMMA params

    CLOSE_PAR       reduce using rule 64 (params -> ID COLON type .)
    COMMA           shift and go to state 122

    mas_params                     shift and go to state 121

state 103

    (63) funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET . vars body R_BRACKET SEMI_COLON
    (2) vars -> . VAR variables COLON type SEMI_COLON mas_var
    (3) vars -> . empty
    (68) empty -> .

    VAR             shift and go to state 7
    LEFT_CURLY      reduce using rule 68 (empty -> .)

    vars                           shift and go to state 123
    empty                          shift and go to state 8

state 104

    (25) assign -> ID EQUAL expresion SEMI_COLON .

    ID              reduce using rule 25 (assign -> ID EQUAL expresion SEMI_COLON .)
    IF              reduce using rule 25 (assign -> ID EQUAL expresion SEMI_COLON .)
    DO              reduce using rule 25 (assign -> ID EQUAL expresion SEMI_COLON .)
    PRINT           reduce using rule 25 (assign -> ID EQUAL expresion SEMI_COLON .)
    RIGHT_CURLY     reduce using rule 25 (assign -> ID EQUAL expresion SEMI_COLON .)


state 105

    (60) f_call -> ID OPEN_PAR expresion mas_f_call . CLOSE_PAR SEMI_COLON

    CLOSE_PAR       shift and go to state 124


state 106

    (61) mas_f_call -> COMMA . expresion
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    expresion                      shift and go to state 125
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 107

    (62) mas_f_call -> empty .

    CLOSE_PAR       reduce using rule 62 (mas_f_call -> empty .)


state 108

    (57) condition -> IF OPEN_PAR expresion CLOSE_PAR . body mas_condition SEMI_COLON
    (17) body -> . LEFT_CURLY mas_statement RIGHT_CURLY

    LEFT_CURLY      shift and go to state 26

    body                           shift and go to state 126

state 109

    (56) cycle -> DO body WHILE OPEN_PAR . expresion CLOSE_PAR SEMI_COLON
    (26) expresion -> . exp mas_expresion
    (31) exp -> . termino mas_exp
    (35) termino -> . factor mas_termino
    (39) factor -> . mas_factor
    (40) mas_factor -> . OPEN_PAR expresion CLOSE_PAR
    (41) mas_factor -> . signo ID
    (42) mas_factor -> . signo cte
    (43) mas_factor -> . ADD cte
    (44) mas_factor -> . SUBTRACT cte
    (45) signo -> . ADD
    (46) signo -> . SUBTRACT
    (47) signo -> . empty
    (68) empty -> .

    OPEN_PAR        shift and go to state 62
    ADD             shift and go to state 64
    SUBTRACT        shift and go to state 65
    ID              reduce using rule 68 (empty -> .)
    CTE_STRING      reduce using rule 68 (empty -> .)
    CTE_FLOAT       reduce using rule 68 (empty -> .)
    CTE_INT         reduce using rule 68 (empty -> .)

    expresion                      shift and go to state 127
    exp                            shift and go to state 58
    termino                        shift and go to state 59
    factor                         shift and go to state 60
    mas_factor                     shift and go to state 61
    signo                          shift and go to state 63
    empty                          shift and go to state 66

state 110

    (51) print -> PRINT expresion mas_print SEMI_COLON .

    ID              reduce using rule 51 (print -> PRINT expresion mas_print SEMI_COLON .)
    IF              reduce using rule 51 (print -> PRINT expresion mas_print SEMI_COLON .)
    DO              reduce using rule 51 (print -> PRINT expresion mas_print SEMI_COLON .)
    PRINT           reduce using rule 51 (print -> PRINT expresion mas_print SEMI_COLON .)
    RIGHT_CURLY     reduce using rule 51 (print -> PRINT expresion mas_print SEMI_COLON .)


state 111

    (53) mas_print -> COMMA expresion . mas_print
    (53) mas_print -> . COMMA expresion mas_print
    (54) mas_print -> . CTE_STRING mas_print
    (55) mas_print -> . empty
    (68) empty -> .

    COMMA           shift and go to state 77
    CTE_STRING      shift and go to state 78
    SEMI_COLON      reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    RIGHT_CURLY     reduce using rule 68 (empty -> .)

    mas_print                      shift and go to state 128
    empty                          shift and go to state 79

state 112

    (54) mas_print -> CTE_STRING mas_print .

    SEMI_COLON      reduce using rule 54 (mas_print -> CTE_STRING mas_print .)
    ID              reduce using rule 54 (mas_print -> CTE_STRING mas_print .)
    IF              reduce using rule 54 (mas_print -> CTE_STRING mas_print .)
    DO              reduce using rule 54 (mas_print -> CTE_STRING mas_print .)
    PRINT           reduce using rule 54 (mas_print -> CTE_STRING mas_print .)
    RIGHT_CURLY     reduce using rule 54 (mas_print -> CTE_STRING mas_print .)


state 113

    (27) mas_expresion -> MORE_THAN exp .

    COMMA           reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    CTE_STRING      reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    SEMI_COLON      reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    CLOSE_PAR       reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    ID              reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    IF              reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    DO              reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    PRINT           reduce using rule 27 (mas_expresion -> MORE_THAN exp .)
    RIGHT_CURLY     reduce using rule 27 (mas_expresion -> MORE_THAN exp .)


state 114

    (28) mas_expresion -> LESS_THAN exp .

    COMMA           reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    CTE_STRING      reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    SEMI_COLON      reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    CLOSE_PAR       reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    ID              reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    IF              reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    DO              reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    PRINT           reduce using rule 28 (mas_expresion -> LESS_THAN exp .)
    RIGHT_CURLY     reduce using rule 28 (mas_expresion -> LESS_THAN exp .)


state 115

    (29) mas_expresion -> NOT_EQUAL exp .

    COMMA           reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    CTE_STRING      reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    SEMI_COLON      reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    CLOSE_PAR       reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    ID              reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    IF              reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    DO              reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    PRINT           reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)
    RIGHT_CURLY     reduce using rule 29 (mas_expresion -> NOT_EQUAL exp .)


state 116

    (32) mas_exp -> ADD termino .

    MORE_THAN       reduce using rule 32 (mas_exp -> ADD termino .)
    LESS_THAN       reduce using rule 32 (mas_exp -> ADD termino .)
    NOT_EQUAL       reduce using rule 32 (mas_exp -> ADD termino .)
    COMMA           reduce using rule 32 (mas_exp -> ADD termino .)
    CTE_STRING      reduce using rule 32 (mas_exp -> ADD termino .)
    SEMI_COLON      reduce using rule 32 (mas_exp -> ADD termino .)
    CLOSE_PAR       reduce using rule 32 (mas_exp -> ADD termino .)
    ID              reduce using rule 32 (mas_exp -> ADD termino .)
    IF              reduce using rule 32 (mas_exp -> ADD termino .)
    DO              reduce using rule 32 (mas_exp -> ADD termino .)
    PRINT           reduce using rule 32 (mas_exp -> ADD termino .)
    RIGHT_CURLY     reduce using rule 32 (mas_exp -> ADD termino .)


state 117

    (33) mas_exp -> SUBTRACT termino .

    MORE_THAN       reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    LESS_THAN       reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    NOT_EQUAL       reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    COMMA           reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    CTE_STRING      reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    SEMI_COLON      reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    CLOSE_PAR       reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    ID              reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    IF              reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    DO              reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    PRINT           reduce using rule 33 (mas_exp -> SUBTRACT termino .)
    RIGHT_CURLY     reduce using rule 33 (mas_exp -> SUBTRACT termino .)


state 118

    (36) mas_termino -> MULTIPLY factor .

    ADD             reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    SUBTRACT        reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    MORE_THAN       reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    LESS_THAN       reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    NOT_EQUAL       reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    COMMA           reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    CTE_STRING      reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    SEMI_COLON      reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    CLOSE_PAR       reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    ID              reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    IF              reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    DO              reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    PRINT           reduce using rule 36 (mas_termino -> MULTIPLY factor .)
    RIGHT_CURLY     reduce using rule 36 (mas_termino -> MULTIPLY factor .)


state 119

    (37) mas_termino -> DIVIDE factor .

    ADD             reduce using rule 37 (mas_termino -> DIVIDE factor .)
    SUBTRACT        reduce using rule 37 (mas_termino -> DIVIDE factor .)
    MORE_THAN       reduce using rule 37 (mas_termino -> DIVIDE factor .)
    LESS_THAN       reduce using rule 37 (mas_termino -> DIVIDE factor .)
    NOT_EQUAL       reduce using rule 37 (mas_termino -> DIVIDE factor .)
    COMMA           reduce using rule 37 (mas_termino -> DIVIDE factor .)
    CTE_STRING      reduce using rule 37 (mas_termino -> DIVIDE factor .)
    SEMI_COLON      reduce using rule 37 (mas_termino -> DIVIDE factor .)
    CLOSE_PAR       reduce using rule 37 (mas_termino -> DIVIDE factor .)
    ID              reduce using rule 37 (mas_termino -> DIVIDE factor .)
    IF              reduce using rule 37 (mas_termino -> DIVIDE factor .)
    DO              reduce using rule 37 (mas_termino -> DIVIDE factor .)
    PRINT           reduce using rule 37 (mas_termino -> DIVIDE factor .)
    RIGHT_CURLY     reduce using rule 37 (mas_termino -> DIVIDE factor .)


state 120

    (40) mas_factor -> OPEN_PAR expresion CLOSE_PAR .

    MULTIPLY        reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    DIVIDE          reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    ADD             reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    SUBTRACT        reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    MORE_THAN       reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    LESS_THAN       reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    NOT_EQUAL       reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    COMMA           reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    CTE_STRING      reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    SEMI_COLON      reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    CLOSE_PAR       reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    ID              reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    IF              reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    DO              reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    PRINT           reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)
    RIGHT_CURLY     reduce using rule 40 (mas_factor -> OPEN_PAR expresion CLOSE_PAR .)


state 121

    (65) params -> ID COLON type mas_params .

    CLOSE_PAR       reduce using rule 65 (params -> ID COLON type mas_params .)


state 122

    (67) mas_params -> COMMA . params
    (64) params -> . ID COLON type
    (65) params -> . ID COLON type mas_params
    (66) params -> . empty
    (68) empty -> .

    ID              shift and go to state 46
    CLOSE_PAR       reduce using rule 68 (empty -> .)

    params                         shift and go to state 129
    empty                          shift and go to state 48

state 123

    (63) funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars . body R_BRACKET SEMI_COLON
    (17) body -> . LEFT_CURLY mas_statement RIGHT_CURLY

    LEFT_CURLY      shift and go to state 26

    body                           shift and go to state 130

state 124

    (60) f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR . SEMI_COLON

    SEMI_COLON      shift and go to state 131


state 125

    (61) mas_f_call -> COMMA expresion .

    CLOSE_PAR       reduce using rule 61 (mas_f_call -> COMMA expresion .)


state 126

    (57) condition -> IF OPEN_PAR expresion CLOSE_PAR body . mas_condition SEMI_COLON
    (58) mas_condition -> . ELSE body
    (59) mas_condition -> . empty
    (68) empty -> .

    ELSE            shift and go to state 133
    SEMI_COLON      reduce using rule 68 (empty -> .)

    mas_condition                  shift and go to state 132
    empty                          shift and go to state 134

state 127

    (56) cycle -> DO body WHILE OPEN_PAR expresion . CLOSE_PAR SEMI_COLON

    CLOSE_PAR       shift and go to state 135


state 128

    (53) mas_print -> COMMA expresion mas_print .

    SEMI_COLON      reduce using rule 53 (mas_print -> COMMA expresion mas_print .)
    ID              reduce using rule 53 (mas_print -> COMMA expresion mas_print .)
    IF              reduce using rule 53 (mas_print -> COMMA expresion mas_print .)
    DO              reduce using rule 53 (mas_print -> COMMA expresion mas_print .)
    PRINT           reduce using rule 53 (mas_print -> COMMA expresion mas_print .)
    RIGHT_CURLY     reduce using rule 53 (mas_print -> COMMA expresion mas_print .)


state 129

    (67) mas_params -> COMMA params .

    CLOSE_PAR       reduce using rule 67 (mas_params -> COMMA params .)


state 130

    (63) funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body . R_BRACKET SEMI_COLON

    R_BRACKET       shift and go to state 136


state 131

    (60) f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON .

    ID              reduce using rule 60 (f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON .)
    IF              reduce using rule 60 (f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON .)
    DO              reduce using rule 60 (f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON .)
    PRINT           reduce using rule 60 (f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON .)
    RIGHT_CURLY     reduce using rule 60 (f_call -> ID OPEN_PAR expresion mas_f_call CLOSE_PAR SEMI_COLON .)


state 132

    (57) condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition . SEMI_COLON

    SEMI_COLON      shift and go to state 137


state 133

    (58) mas_condition -> ELSE . body
    (17) body -> . LEFT_CURLY mas_statement RIGHT_CURLY

    LEFT_CURLY      shift and go to state 26

    body                           shift and go to state 138

state 134

    (59) mas_condition -> empty .

    SEMI_COLON      reduce using rule 59 (mas_condition -> empty .)


state 135

    (56) cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR . SEMI_COLON

    SEMI_COLON      shift and go to state 139


state 136

    (63) funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET . SEMI_COLON

    SEMI_COLON      shift and go to state 140


state 137

    (57) condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON .

    ID              reduce using rule 57 (condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON .)
    IF              reduce using rule 57 (condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON .)
    DO              reduce using rule 57 (condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON .)
    PRINT           reduce using rule 57 (condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON .)
    RIGHT_CURLY     reduce using rule 57 (condition -> IF OPEN_PAR expresion CLOSE_PAR body mas_condition SEMI_COLON .)


state 138

    (58) mas_condition -> ELSE body .

    SEMI_COLON      reduce using rule 58 (mas_condition -> ELSE body .)


state 139

    (56) cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON .

    ID              reduce using rule 56 (cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON .)
    IF              reduce using rule 56 (cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON .)
    DO              reduce using rule 56 (cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON .)
    PRINT           reduce using rule 56 (cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON .)
    RIGHT_CURLY     reduce using rule 56 (cycle -> DO body WHILE OPEN_PAR expresion CLOSE_PAR SEMI_COLON .)


state 140

    (63) funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON .

    VOID            reduce using rule 63 (funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON .)
    MAIN            reduce using rule 63 (funcs -> VOID ID OPEN_PAR params CLOSE_PAR L_BRACKET vars body R_BRACKET SEMI_COLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CTE_STRING in state 45 resolved as shift
WARNING: shift/reduce conflict for CTE_STRING in state 64 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 64 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 64 resolved as shift
WARNING: shift/reduce conflict for CTE_STRING in state 65 resolved as shift
WARNING: shift/reduce conflict for CTE_FLOAT in state 65 resolved as shift
WARNING: shift/reduce conflict for CTE_INT in state 65 resolved as shift
